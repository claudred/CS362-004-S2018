File 'unittest1.c'
Lines executed:88.64% of 44
Branches executed:83.33% of 12
Taken at least once:50.00% of 12
Calls executed:86.36% of 22
Creating 'unittest1.c.gcov'

File 'unittest2.c'
Lines executed:92.86% of 28
Branches executed:71.43% of 14
Taken at least once:57.14% of 14
Calls executed:80.00% of 15
Creating 'unittest2.c.gcov'

File 'unittest3.c'
Lines executed:92.62% of 149
Branches executed:92.86% of 84
Taken at least once:71.43% of 84
Calls executed:91.30% of 92
Creating 'unittest3.c.gcov'

File 'unittest4.c'
Lines executed:91.30% of 46
Branches executed:100.00% of 18
Taken at least once:77.78% of 18
Calls executed:80.00% of 20
Creating 'unittest4.c.gcov'

File 'cardtest1.c'
Lines executed:95.52% of 67
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:92.11% of 38
Creating 'cardtest1.c.gcov'

File 'cardtest2.c'
Lines executed:94.74% of 57
Branches executed:100.00% of 8
Taken at least once:62.50% of 8
Calls executed:91.89% of 37
Creating 'cardtest2.c.gcov'

File 'cardtest3.c'
Lines executed:85.29% of 68
Branches executed:76.92% of 26
Taken at least once:53.85% of 26
Calls executed:77.14% of 35
Creating 'cardtest3.c.gcov'

File 'cardtest4.c'
Lines executed:82.11% of 95
Branches executed:68.42% of 38
Taken at least once:47.37% of 38
Calls executed:74.42% of 43
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:46.65% of 568
Branches executed:42.93% of 417
Taken at least once:33.57% of 417
Calls executed:34.69% of 98
Creating 'dominion.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:#include <stdio.h>
        -:    6:void rv_shuffle_deckCount(int rv, int rp);
        -:    7:int check_shuffle(int player, struct gameState *one, struct gameState *two);
function main called 1 returned 100% blocks executed 95%
        1:    8:int main(int argc, char *argv[]) 
        -:    9:{
        1:   10:	printf("-------UNIT TEST 1------\n");
call    0 returned 100%
        1:   11:	printf("---Testing 'shuffle'---\n");
call    0 returned 100%
        1:   12:	struct gameState* testShuffle=newGame();
call    0 returned 100%
        1:   13:	struct gameState* save=newGame();
call    0 returned 100%
        1:   14:	int numPlayers=2;
        1:   15:	int* kc=kingdomCards(adventurer, baron, council_room, feast, gardens, remodel, smithy, village, great_hall, minion);
call    0 returned 100%
        1:   16:	int randomSeed=1000;
        1:   17:	initializeGame(numPlayers, kc, randomSeed, testShuffle);
call    0 returned 100%
        -:   18:	//return value=rv
        1:   19:	int rv=0;
        -:   20:	//save the state
        1:   21:	*save=*testShuffle;
        1:   22:	int rp=whoseTurn(testShuffle);
call    0 returned 100%
        -:   23:	//assume that all hands are now in deck array or hand or played and that the discard pile is empty
        1:   24:	printf("PRE-CONDITIONS: FOR TEST CASE 1:\n1.`shuffle()` is receiving an empty discard pile for player %i:\n ", rp);
call    0 returned 100%
        1:   25:	printf("testShuffle->discardCount[%i]:%i\n", rp, testShuffle->discardCount[rp]);
call    0 returned 100%
        -:   26:	
        1:   27:	rv=shuffle(rp, testShuffle);
call    0 returned 100%
        1:   28:	if (rv==0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   29:	{
        1:   30:		printf("shuffle returned 0, indicating success; checkign deck\n");
call    0 returned 100%
        1:   31:		if (check_shuffle(rp, save, testShuffle)>0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   32:		{
    #####:   33:			printf("OVERALL: Success, at least one item changed in deck\n");
call    0 never executed
        -:   34:		}
        -:   35:		else 
        -:   36:		{
        1:   37:			printf("OVERALL: Failure, not even one item changed in deck\n");
call    0 returned 100%
        -:   38:		}
        -:   39:	}
        -:   40:	
        -:   41:
        -:   42:	
        1:   43:	printf("\n\nPRE-CONDITIONS: FOR TEST CASE 2: Empty player deck for player %i.\nShuffle checks the state of the players deck; if it is less than  1, it should return -1\n", rp);
call    0 returned 100%
        1:   44:	*testShuffle=*save;
        1:   45:	testShuffle->deckCount[rp]=0;
        1:   46:	rv=shuffle(rp, testShuffle);
call    0 returned 100%
        -:   47:	
        1:   48:	rv_shuffle_deckCount(rv, rp);
call    0 returned 100%
        -:   49:	//after running rv_shuffle_deckCount with -1 and some rp, running the followign statement would give us 100% coverage for the rv_shuffle_deckount branches, but I don't know how to trick "shuffled" into ignoring an empty deck.
        -:   50:	//rv_shuffle_deckCount(0, rp);
        -:   51:	
        1:   52:	printf("-------FINISHED UNIT TEST 1------\n");
call    0 returned 100%
        1:   53:	return 0;
        -:   54:	
        -:   55:}
function rv_shuffle_deckCount called 1 returned 100% blocks executed 60%
        1:   56:void rv_shuffle_deckCount(int rv, int rp)
        -:   57:{
        1:   58:	if (rv==-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   59:	{
        1:   60:		printf("SUCCESS: noted that the deckCount for player %i is less than one\n", rp);
call    0 returned 100%
        -:   61:	}
    #####:   62:	else if (rv!=-1)
branch  0 never executed
branch  1 never executed
        -:   63:	{
    #####:   64:		printf("FAILURE: did not note that the deckCount for player %i is less than one, returned %i\n", rp, rv);
call    0 never executed
        -:   65:	}
        1:   66:}
function check_shuffle called 1 returned 100% blocks executed 80%
        1:   67:int check_shuffle(int player, struct gameState *one, struct gameState *two)
        -:   68:{
        1:   69:	int n=one->deckCount[player];
        -:   70:	int i;
        1:   71:	int failureCount=0;
        1:   72:	int successCount=0;
        6:   73:	for (i=0; i < n; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   74:	{
        5:   75:		if (one->deck[player][i]==two->deck[player][i])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   76:		{ 
        5:   77:			printf("FAILURE: card for player %i at %i the same as before: %i and %i\n", player,  i, one->deck[player][i], two->deck[player][i]);
call    0 returned 100%
        5:   78:			failureCount++;
        -:   79:		}
        -:   80:		else 
        -:   81:		{
    #####:   82:			printf("SUCCESS: card for player %i at %i NOT the same as before: %i and %i\n", player,  i, one->deck[player][i], two->deck[player][i]);
call    0 never executed
    #####:   83:			successCount++;
        -:   84:		}
        -:   85:	}
        1:   86:	return successCount;
        -:   87:}
        -:   88:/*
        -:   89:int shuffle(int player, struct gameState *state) {
        -:   90: 
        -:   91:
        -:   92:	int newDeck[MAX_DECK];
        -:   93:	int newDeckPos = 0;
        -:   94:	int card;
        -:   95:	int i;
        -:   96:
        -:   97:	if (state->deckCount[player] < 1)
        -:   98:		return -1;
        -:   99:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  100:	//SORT CARDS IN DECK TO ENSURE DETERMINISM!
        -:  101:
        -:  102:	while (state->deckCount[player] > 0) {
        -:  103:		card = floor(Random() * state->deckCount[player]);
        -:  104:		newDeck[newDeckPos] = state->deck[player][card];
        -:  105:		newDeckPos++;
        -:  106:		for (i = card; i < state->deckCount[player]-1; i++) {
        -:  107:			state->deck[player][i] = state->deck[player][i+1];
        -:  108:		}
        -:  109:		state->deckCount[player]--;
        -:  110:	}
        -:  111:	for (i = 0; i < newDeckPos; i++) {
        -:  112:		state->deck[player][i] = newDeck[i];
        -:  113:		state->deckCount[player]++;
        -:  114:	}
        -:  115:
        -:  116:	return 0;
        -:  117:}
        -:  118:
        -:  119:*/
        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:int test(int input[10], int output[10]);
        -:    9:int check_card(int card);
function main called 1 returned 100% blocks executed 100%
        1:   10:int main(int argc, char *argv[]) 
        -:   11:{
        -:   12:	
        1:   13:	printf("+++++STARTING unit test 2: Testing kingdomCards() function+++++\n\n");
call    0 returned 100%
        -:   14:
        1:   15:	printf("---GOOD INPUT: TEST ONE: adding adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall to kingdom cards----\n");
call    0 returned 100%
        1:   16:	int setUs[]={adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   17:	int *kc=kingdomCards(adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy);
call    0 returned 100%
        1:   18:	test(setUs, kc);
call    0 returned 100%
        -:   19:	
        1:   20:	printf("---BAD INPUT: TEST ONE: adding adventurer, copper, feast, gardens, mine, remodel, smithy, village, baron, great_hall to kingdom cards----\n");
call    0 returned 100%
        1:   21:	int setUs2[]={adventurer, copper, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        1:   22:	int *kc2=kingdomCards(adventurer, copper, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy);
call    0 returned 100%
        1:   23:	test(setUs2, kc2);
call    0 returned 100%
        -:   24:	
        1:   25:	printf("\n\n+++++FINISHED unit test 2: Testing kingdomCards() function+++++\n\n");
call    0 returned 100%
        1:   26:	return 0;
        -:   27:	
        -:   28:}
function test called 2 returned 100% blocks executed 71%
        2:   29:int test(int setUs[10], int kc[10])
        -:   30:{
        2:   31:	printf("Checking that each kingdom card corresponds to the intended card\n");
call    0 returned 100%
        2:   32:	int i=0;
       22:   33:	for (i=0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   34:	{
        -:   35:		
       20:   36:		if (kc[i]==setUs[i])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   37:		{
       20:   38:			printf("SUCCESS: Card #%i with enum %i successfully set to kingdom cards array\n", i, kc[i]);
call    0 returned 100%
       20:   39:			if (check_card(kc[i])==-1)
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
        -:   40:			{
        1:   41:				printf("FAILURE: Function allowed a non-kingdom card to be added\n");
call    0 returned 100%
        -:   42:			}
        -:   43:		}
       20:   44:		if ((kc[i]!=setUs[i])&&(check_card(setUs[i])==-1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:   45:		{
    #####:   46:			if (check_card(kc[i])==-1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   47:			{
    #####:   48:				printf("SUCCESS: Function did NOT allow a non-kingdom card to be added\n");
call    0 never executed
        -:   49:			}
        -:   50:		}
        -:   51:	}
        2:   52:	return 0;
        -:   53:	
        -:   54:}
function check_card called 20 returned 100% blocks executed 100%
       20:   55:int check_card(int card)
        -:   56:{
       20:   57:	if (card<adventurer)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:   58:	{
        1:   59:		return -1;
        -:   60:	}
       19:   61:	return 0;
        -:   62:}
        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:int test_numPlayers(int actual, int plan);
        -:    9:int test_supplyCounts(int numPlayers, struct gameState *state);
        -:   10:void test_num_kingcard(int numplayer, struct gameState *gameState, int kingdomCards[10]);
function main called 1 returned 100% blocks executed 95%
        1:   11:int main(int argc, char *argv[]) 
        -:   12:{
        -:   13:	
        1:   14:	printf("$$$$$---UNIT TEST 3---$$$$$\n\n-------Testing 'initializeGame' function with parameters 'int numPlayers', 'int kingdomGard', 'int randomSeed', and 'int gameState *state', and a return value of an integer signifying failure for -1 or 0 for success------\n\n\n");
call    0 returned 100%
        -:   15:
        1:   16:	printf("----TEST CASE 1: GOOD INPUT 2 players-----\n");
call    0 returned 100%
        1:   17:	struct gameState *testGame1=newGame();
call    0 returned 100%
        1:   18:	int *kc1=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall);
call    0 returned 100%
        1:   19:	int test1_numPlayers=2;
        1:   20:	int returnval=initializeGame(test1_numPlayers, kc1, 1234, testGame1);	
call    0 returned 100%
        1:   21:	printf("Checking that the number of players for the state has been appropriately set\n");
call    0 returned 100%
        1:   22:	test_numPlayers(testGame1->numPlayers, test1_numPlayers);
call    0 returned 100%
        1:   23:	test_supplyCounts(testGame1->numPlayers, testGame1);
call    0 returned 100%
        1:   24:	test_num_kingcard(testGame1->numPlayers, testGame1, kc1);
call    0 returned 100%
        1:   25:		printf("----FINISHED TEST CASE 1----\n\n\n");
call    0 returned 100%
        -:   26:	
        1:   27:	printf("----TEST CASE 1A: GOOD INPUT 3 players-----\n");
call    0 returned 100%
        1:   28:	struct gameState *testGame1A=newGame();
call    0 returned 100%
        1:   29:	int *kc1A=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall);
call    0 returned 100%
        1:   30:	int test1A_numPlayers=3;
        1:   31:	returnval=initializeGame(test1A_numPlayers, kc1A, 1234, testGame1A);	
call    0 returned 100%
        1:   32:	printf("Checking that the number of players for the state has been appropriately set\n");
call    0 returned 100%
        1:   33:	test_numPlayers(testGame1A->numPlayers, test1A_numPlayers);
call    0 returned 100%
        1:   34:	test_supplyCounts(testGame1A->numPlayers, testGame1A);
call    0 returned 100%
        1:   35:	test_num_kingcard(testGame1A->numPlayers, testGame1A, kc1A);
call    0 returned 100%
        1:   36:	printf("----FINISHED TEST CASE 1A----\n\n\n");
call    0 returned 100%
        -:   37:	
        -:   38:	
        1:   39:	printf("----TEST CASE 1B: GOOD INPUT 4 players-----\n");
call    0 returned 100%
        1:   40:	struct gameState *testGame1B=newGame();
call    0 returned 100%
        1:   41:	int *kc1B=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall);
call    0 returned 100%
        1:   42:	int test1B_numPlayers=4;
        1:   43:	returnval=initializeGame(test1B_numPlayers, kc1B, 1234, testGame1B);	
call    0 returned 100%
        1:   44:	printf("Checking that the number of players for the state has been appropriately set\n");
call    0 returned 100%
        1:   45:	test_numPlayers(testGame1B->numPlayers, test1B_numPlayers);
call    0 returned 100%
        1:   46:	test_supplyCounts(testGame1B->numPlayers, testGame1B);
call    0 returned 100%
        1:   47:	test_num_kingcard(testGame1B->numPlayers, testGame1B, kc1B);
call    0 returned 100%
        1:   48:	printf("----FINISHED TEST CASE 1B----\n\n\n");
call    0 returned 100%
        -:   49:	
        -:   50:		
        1:   51:	printf("----TEST CASE 2: BAD INPUT RE: NumPlayers-----\n");
call    0 returned 100%
        1:   52:	printf("Attempting to initialize game with 5 players; should return -1\n");
call    0 returned 100%
        1:   53:	struct gameState *testGame2=newGame();
call    0 returned 100%
        1:   54:	int *kc2=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall);
call    0 returned 100%
        1:   55:	int test2_numPlayers=5;
        1:   56:	returnval=initializeGame(test2_numPlayers, kc2, 1234, testGame2);	
call    0 returned 100%
        1:   57:	if (returnval==-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   58:	{
        1:   59:		printf("SUCCESS: registered that there are too many players\n");
call    0 returned 100%
        -:   60:	}
        -:   61:	else 
        -:   62:	{
    #####:   63:		printf("FAILURE: did not register that there are too many players\n");
call    0 never executed
        -:   64:	}
        -:   65:	
        1:   66:	test_numPlayers(testGame2->numPlayers, test2_numPlayers);
call    0 returned 100%
        1:   67:	test_supplyCounts(testGame2->numPlayers, testGame2);
call    0 returned 100%
        -:   68:	
        1:   69:	printf("----FINISHED TEST CASE 2----\n\n\n");
call    0 returned 100%
        1:   70:	printf("----TEST CASE 3: BAD INPUT RE: duplicate cards-----\n");
call    0 returned 100%
        1:   71:	printf("Attempting to initialize game with duplicate cards; should return -1\n");
call    0 returned 100%
        1:   72:	struct gameState *testGame3=newGame();
call    0 returned 100%
        1:   73:	int *kc3=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, adventurer);
call    0 returned 100%
        1:   74:	int test3_numPlayers=2;
        1:   75:	returnval=initializeGame(test3_numPlayers, kc3, 1234, testGame3);	
call    0 returned 100%
        1:   76:	if (returnval==-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:	{
        1:   78:		printf("SUCCESS: registered that there are duplicate cards\n");
call    0 returned 100%
        -:   79:	}
        -:   80:	else 
        -:   81:	{
    #####:   82:		printf("FAILURE: did not register that there are duplicate cards\n");
call    0 never executed
        -:   83:	}
        1:   84:	test_numPlayers(testGame3->numPlayers, test3_numPlayers);
call    0 returned 100%
        1:   85:	test_supplyCounts(testGame3->numPlayers, testGame3);
call    0 returned 100%
        -:   86:	
        1:   87:	printf("----FINISHED TEST CASE 3----\n\n\n");
call    0 returned 100%
        -:   88:	
        1:   89:	printf("----TEST CASE 4: BAD INPUT RE: non-kingdom cards-----\n");
call    0 returned 100%
        1:   90:	printf("Attempting to initialize game with duplicate cards; should return -1\n");
call    0 returned 100%
        -:   91:	
        1:   92:	struct gameState *testGame4=newGame();
call    0 returned 100%
        1:   93:	int *kc4=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, copper);
call    0 returned 100%
        1:   94:	int test4_numPlayers=2;
        1:   95:	returnval=initializeGame(test4_numPlayers, kc4, 1234, testGame4);	
call    0 returned 100%
        1:   96:	if (returnval==-1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   97:	{
    #####:   98:		printf("SUCCESS: registered that there is a non-kingdom card\n");
call    0 never executed
        -:   99:	}
        -:  100:	else 
        -:  101:	{
        1:  102:		printf("FAILURE: did not register that there is a non-kingdom card\n");
call    0 returned 100%
        -:  103:	}
        1:  104:	test_numPlayers(testGame4->numPlayers, test4_numPlayers);
call    0 returned 100%
        1:  105:	test_supplyCounts(testGame4->numPlayers, testGame4);
call    0 returned 100%
        1:  106:	printf("----FINISHED TEST CASE 4----\n\n\n");
call    0 returned 100%
        -:  107:	
        1:  108:	return 0;
        -:  109:	
        -:  110:	
        -:  111:}
function test_numPlayers called 6 returned 100% blocks executed 100%
        6:  112:int test_numPlayers(int actual, int plan)
        -:  113:{
        6:  114:	if (actual==plan)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        -:  115:	{
        5:  116:		printf("SUCCESS: %i matches %i\n", actual, plan);
call    0 returned 100%
        5:  117:		return 0;
        -:  118:	}
        -:  119:	else 
        -:  120:	{
        1:  121:		printf("FAILURE: %i does not match %i\n", actual, plan);
call    0 returned 100%
        1:  122:		return -1;
        -:  123:	}
        -:  124:}
function test_supplyCounts called 6 returned 100% blocks executed 96%
        6:  125:int test_supplyCounts(int numPlayers, struct gameState *state)
        -:  126:{
        6:  127:	if ((state->supplyCount[copper])== 60 - (7 * numPlayers))
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  128:	{
        4:  129:		printf("SUCCESS: correct number of copper cards set: %i\n", state->supplyCount[copper]);
call    0 returned 100%
        -:  130:	}
        2:  131:	else if ((state->supplyCount[copper])!=60 - (7 * numPlayers))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  132:	{
        2:  133:		printf("FAILURE: incorrect number of copper cards set: %i\n", state->supplyCount[copper]);
call    0 returned 100%
        -:  134:
        -:  135:	}
        6:  136:	if (state->supplyCount[silver]==40)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  137:	{
        4:  138:		printf("SUCCESS: correct number of silver cards set: %i\n", state->supplyCount[silver]);
call    0 returned 100%
        -:  139:	}
        2:  140:	else if (state->supplyCount[silver]!=40)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  141:	{
        2:  142:		printf("FAILURE: incorrect number of silver cards set: %i\n", state->supplyCount[silver]);
call    0 returned 100%
        -:  143:	}
        6:  144:	if (state->supplyCount[gold]==30)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  145:	{
        4:  146:		printf("SUCCESS: correct number of gold cards set: %i\n", state->supplyCount[gold]);
call    0 returned 100%
        -:  147:	}
        2:  148:	else if (state->supplyCount[gold]!=30)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  149:	{
        2:  150:		printf("FAILURE: incorrect number of gold cards set: %i\n", state->supplyCount[gold]);
call    0 returned 100%
        -:  151:	}
        6:  152:	if (numPlayers==2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  153:	{
        3:  154:		if (state->supplyCount[curse]==10)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  155:		{
        2:  156:			printf("SUCCESS: correct number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 returned 100%
        -:  157:		}
        -:  158:		else 
        -:  159:		{
        1:  160:			printf("FAILURE: incorrect number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 returned 100%
        -:  161:		}
        3:  162:		if (state->supplyCount[estate]==8)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  163:		{
        2:  164:			printf("SUCCESS: correct number of estate cards set: %i\n", state->supplyCount[estate]);
call    0 returned 100%
        -:  165:		}
        1:  166:		else if (state->supplyCount[estate]!=8)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  167:		{
        1:  168:			printf("FAILURE: incorrect number of estate cards set: %i\n", state->supplyCount[estate]);
call    0 returned 100%
        -:  169:		}
        3:  170:		if (state->supplyCount[duchy]==8)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  171:		{
        2:  172:			printf("SUCCESS: correct number of duchy cards set: %i\n", state->supplyCount[duchy]);
call    0 returned 100%
        -:  173:		}
        1:  174:		else if (state->supplyCount[duchy]!=8)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  175:		{
        1:  176:			printf("FAILURE: incorrect number of duchy cards set: %i\n", state->supplyCount[duchy]);
call    0 returned 100%
        -:  177:		}
        3:  178:		if (state->supplyCount[province]==8)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  179:		{
        2:  180:			printf("SUCCESS: correct number of province cards set: %i\n", state->supplyCount[province]);
call    0 returned 100%
        -:  181:		}
        1:  182:		else if (state->supplyCount[province]!=8)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  183:		{
        1:  184:			printf("FAILURE: incorrect number of province cards set: %i\n", state->supplyCount[province]);
call    0 returned 100%
        -:  185:		}
        -:  186:
        -:  187:	}
        -:  188:	else 
        -:  189:	{
        3:  190:		if (numPlayers==3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  191:		{
        1:  192:			if (state->supplyCount[curse]==20)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  193:			{
        1:  194:				printf("SUCCESS: correct number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 returned 100%
        -:  195:
        -:  196:			}
        -:  197:			else 
        -:  198:			{
    #####:  199:				printf("FAILURE: incorrect number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 never executed
        -:  200:			}
        -:  201:		}
        3:  202:		if (numPlayers==4)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  203:		{
        1:  204:			if (state->supplyCount[curse]==30)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  205:			{
        1:  206:				printf("SUCCESS: correct number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 returned 100%
        -:  207:			}
        -:  208:			else 
        -:  209:			{
    #####:  210:				printf("FAILURE: incorrect number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 never executed
        -:  211:			}
        -:  212:		}
        -:  213:			
        3:  214:		if (state->supplyCount[estate]==12)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  215:		{
        2:  216:			printf("SUCCESS: correct number of estate cards set: %i\n", state->supplyCount[estate]);
call    0 returned 100%
        -:  217:
        -:  218:		}
        1:  219:		else if (state->supplyCount[estate]!=12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  220:		{
        1:  221:			printf("FAILURE: incorrect number of estate cards set: %i\n", state->supplyCount[estate]);
call    0 returned 100%
        -:  222:		}
        3:  223:		if (state->supplyCount[duchy]==12)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  224:		{
        2:  225:			printf("SUCCESS: correct number of duchy cards set: %i\n", state->supplyCount[duchy]);
call    0 returned 100%
        -:  226:
        -:  227:		}
        1:  228:		else if (state->supplyCount[duchy]!=12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  229:		{
        1:  230:			printf("FAILURE: incorrect number of duchy cards set: %i\n", state->supplyCount[duchy]);
call    0 returned 100%
        -:  231:		}
        3:  232:		if (state->supplyCount[province]==12)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  233:		{
        2:  234:			printf("SUCCESS: correct number of province cards set: %i\n", state->supplyCount[province]);
call    0 returned 100%
        -:  235:
        -:  236:		}
        1:  237:		else if (state->supplyCount[province]!=12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  238:		{
        1:  239:			printf("FAILURE: incorrect number of province cards set: %i\n", state->supplyCount[province]);
call    0 returned 100%
        -:  240:		}
        -:  241:
        -:  242:
        -:  243:	}
        6:  244:	return 0;
        -:  245:}
function test_num_kingcard called 3 returned 100% blocks executed 80%
        3:  246:void test_num_kingcard(int numPlayers, struct gameState *state, int kingdomCards[10])
        -:  247:{
        -:  248:	int i;
        -:  249:	int j;
       63:  250:	for (i = adventurer; i <= treasure_map; i++)//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  251:	{
      495:  252:		for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  253:		{
      465:  254:			if (kingdomCards[j]==i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  255:			{
        -:  256:				//check if card is a 'Victory' Kingdom card
       30:  257:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  258:				{
       12:  259:					if (numPlayers==2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  260:					{ 
        -:  261:						//state->supplyCount[i] = 8; 
        2:  262:						if (state->supplyCount[i]==8)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  263:						{
        2:  264:							printf("SUCCESS: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 returned 100%
        -:  265:						}
    #####:  266:						else if (state->supplyCount[i]!=8)
branch  0 never executed
branch  1 never executed
        -:  267:						{
    #####:  268:							printf("FAILURE: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 never executed
        -:  269:						}
        -:  270:					}
        -:  271:					else
        -:  272:					{ 
        -:  273:						//state->supplyCount[i] = 12; 
        4:  274:						if (state->supplyCount[i]==12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  275:						{
        4:  276:							printf("SUCCESS: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 returned 100%
        -:  277:						}
    #####:  278:						else if (state->supplyCount[i]!=12)
branch  0 never executed
branch  1 never executed
        -:  279:						{
    #####:  280:							printf("FAILURE: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 never executed
        -:  281:						}
        -:  282:
        -:  283:					}
        -:  284:				}
        -:  285:				else
        -:  286:				{
        -:  287:					//state->supplyCount[i] = 10;
       24:  288:					if (state->supplyCount[i]==10)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  289:					{
       24:  290:						printf("SUCCESS: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 returned 100%
        -:  291:					}
    #####:  292:					else if (state->supplyCount[i]!=10)
branch  0 never executed
branch  1 never executed
        -:  293:					{
    #####:  294:						printf("FAILURE: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 never executed
        -:  295:					}
        -:  296:				}
       30:  297:	      		break;
        -:  298:			}
        -:  299:			else    //card is not in the set choosen for the game
        -:  300:			 {
        -:  301:				//state->supplyCount[i] = -1;
      435:  302:				if (state->supplyCount[i]==-1)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -:  303:				{
      300:  304:					printf("SUCCESS: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 returned 100%
        -:  305:				}
      135:  306:				else if (state->supplyCount[i]!=-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  307:				{
      135:  308:					printf("FAILURE: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 returned 100%
        -:  309:				}
        -:  310:			}
        -:  311:	   }
        -:  312:	}
        -:  313:
        3:  314:}
        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
function main called 1 returned 100% blocks executed 89%
        1:    8:int main(int argc, char *argv[]) 
        -:    9:{
        1:   10:	printf("testing function `buyCard`, which takes parameters 'int supplyPos', and 'struct gameState *state'\n");
call    0 returned 100%
        1:   11:	printf("-----START: TEST CASES 1 to 27------\n\n");
call    0 returned 100%
        -:   12:	//printf("%i", treasure_map);
        1:   13:	int all_cards[27]={0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26};
        1:   14:	int i=0; 
        1:   15:	struct gameState *testGame=newGame();
call    0 returned 100%
        1:   16:	int *kc1=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall);
call    0 returned 100%
        1:   17:	initializeGame(2, kc1, 3, testGame);
call    0 returned 100%
        1:   18:	printf("You start the game with %i coins\n", testGame->coins);
call    0 returned 100%
        1:   19:	int returnVal=0;
        1:   20:	int num_buys_before=0;
        1:   21:	int num_buys_after=0;
        1:   22:	int coins_before=0;
        1:   23:	int coins_after=0;
        1:   24:	int card_cost=0;
        1:   25:	int num_card_before=0;
        -:   26:	
       28:   27:	for (i=0; i < 27; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   28:	{
       27:   29:		coins_before=testGame->coins;
       27:   30:		num_buys_before=testGame->numBuys;
       27:   31:		num_card_before=testGame->supplyCount[i];
       27:   32:		printf("STATUS BEFORE: coins: %i, buys: %i, number of %i card left: %i\n", coins_before, num_buys_before, i, num_card_before);
call    0 returned 100%
       27:   33:		printf("TESTING BUYCARD with card %i\n", i);
call    0 returned 100%
       27:   34:		returnVal=buyCard(i, testGame);
call    0 returned 100%
       27:   35:		card_cost=getCost(i);
call    0 returned 100%
       27:   36:		if (num_card_before<=0)
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
        -:   37:		{
       10:   38:			if (returnVal==-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   39:			{
       10:   40:				printf("SUCCESS: registered that the number of cards was not enough to buy\n");
call    0 returned 100%
        -:   41:			}
        -:   42:			else {
    #####:   43:				printf("FAILURE: did not register that the number of cards was not enough to buy\n");
call    0 never executed
        -:   44:			}
        -:   45:
        -:   46:		}
       27:   47:		if (card_cost>coins_before)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:   48:		{
       18:   49:			if (returnVal==-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   50:			{
       18:   51:				if (coins_after==coins_before)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   52:				{
    #####:   53:					printf("SUCCESS: registered that did not have enough money to buy cards and did not charge\n");
call    0 never executed
        -:   54:					
        -:   55:				}
        -:   56:			}
        -:   57:			else 
        -:   58:			{
    #####:   59:				printf("FAILURE: did not register that did not have enough money to buy cards.\n");
call    0 never executed
        -:   60:			}
        -:   61:				
        -:   62:		}
        9:   63:		else if (card_cost<coins_before)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -:   64:		{
        4:   65:			if (returnVal==-1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        1:   66:				printf("FAILURE: had enough money to buy cards but some issue occurred; or SUCCESS if other issue shown\n");
call    0 returned 100%
        3:   67:			else if (coins_after==coins_before-card_cost)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   68:				printf("SUCCESS: coins after are equal to coins before minus the coin cost\n");
call    0 never executed
        -:   69:		}
        -:   70:		
        -:   71:		
        -:   72:	
       27:   73:		printf("STATUS AFTER:  coins: %i, buys: %i, number of %i card left: %i\n", testGame->coins, testGame->numBuys, i, testGame->supplyCount[i]);
call    0 returned 100%
       27:   74:		printf("%i\n", returnVal);
call    0 returned 100%
       27:   75:		printf("RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING\n");
call    0 returned 100%
       27:   76:		testGame->coins=coins_before;
       27:   77:		testGame->numBuys=num_buys_before;
       27:   78:		testGame->supplyCount[i]=num_card_before;
        -:   79:		
        -:   80:		
        -:   81:	}
        1:   82:	printf("-----FINISHED: TEST CASE 1-27------\n\n");
call    0 returned 100%
        1:   83:	return 0;
        -:   84:}
        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include "test_helpers.h"
        -:    9:
function main called 1 returned 100% blocks executed 94%
        1:   10:int main(int argc, char *argv[]) 
        -:   11:{
        -:   12:	
        -:   13:	//an introduction
        1:   14:	printf("----STARTING TESTS----\n\n\n");
call    0 returned 100%
        1:   15:	printf("----Welcome to cardtest1.c, home of Card Test 1----\n");
call    0 returned 100%
        1:   16:	printf("----This file facilitates unit tests for the Smithy Card ----\n");
call    0 returned 100%
        1:   17:	printf("-----Smithy is an Action card from the Base Set----\n");
call    0 returned 100%
        1:   18:	printf("-----Smithy's purpose is to increase the handside by drawing three cards----\n");
call    0 returned 100%
        1:   19:	printf("-----Smithy is a terminal card, meaning that it provides no +Action---\n");
call    0 returned 100%
        1:   20:	printf("Tese test do two things:\n1. Test state of hand count\n");
call    0 returned 100%
        1:   21:	printf("2. Test state of played card pile\n");
call    0 returned 100%
        -:   22:	
        1:   23:	int card=smithy;
        1:   24:	int numPlayers=2;
        1:   25:	int seed=420;
        1:   26:	int handpos=0;
        1:   27:	int choice1, choice2, choice3, bonus = 0;
        1:   28:	struct gameState *smithyTest=newGame();
call    0 returned 100%
        1:   29:	struct gameState *save=newGame();
call    0 returned 100%
        1:   30:	int *smithyTestKC=kingdomCards(adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy);
call    0 returned 100%
        1:   31:	initializeGame(numPlayers, smithyTestKC, seed, smithyTest);
call    0 returned 100%
        1:   32:	*save=*smithyTest;
        1:   33:	printf("TEST CASE PARAMETERS: %i players, ", smithyTest->numPlayers);
call    0 returned 100%
        -:   34:	//relevant player=rp
        1:   35:	int rp=smithyTest->whoseTurn;
        1:   36:	printf("testing with player %i.\n", rp+1);
call    0 returned 100%
        -:   37:	//placing Smithy in players hand
        1:   38:	printf("Placing Smithy (enum %i) in player %i's hand at position %i\n",smithy, rp, handpos);
call    0 returned 100%
        1:   39:	smithyTest->hand[rp][handpos]=smithy;
        1:   40:	printPlayerHand(rp, smithyTest);
call    0 returned 100%
        -:   41:	
        -:   42:	//hcb=hand count before
        1:   43:	int hcb=smithyTest->handCount[rp];
        -:   44:	//played card count before
        1:   45:	int pccb=smithyTest->playedCardCount;
        -:   46:
        -:   47:	//pcsb=played card status before
        1:   48:	int pcsb=smithyTest->playedCards[pccb];
        -:   49:	
        -:   50:	//exPCCA=expected played card count after
        1:   51:	int exPCCA=pccb+1;
        -:   52:	//exHCA=expected hand count after: draw three, discard this one; result in 2to more
        1:   53:	int exHCA=hcb+2;
        -:   54:	//exPCSA=expecte played card status after
        1:   55:	int exPCSA=smithy;
        -:   56:	
        -:   57:	//actHCA=actual hand count after
        1:   58:	int actHCA=0;
        -:   59:	
        1:   60:	int return_val=0;
        1:   61:	printf("Player %i's hand count before cardEffect is called with Smithy is: %i\n", rp+1, hcb);
call    0 returned 100%
        1:   62:	printf("Here is the deck state before\n");
call    0 returned 100%
        1:   63:	printPlayerDeck(rp, smithyTest);
call    0 returned 100%
        1:   64:	printf("The games played card count before is %i\n", pccb);
call    0 returned 100%
        1:   65:	printf("Games last played card is %i\n", pcsb);
call    0 returned 100%
        -:   66:	
        1:   67:	printf("--TEST CASE 1: calling with card:\n%i, choice1: %i, choice2: %i, choice3: %i, smithyTest: %p, handpos: %i, bonus: %p--\n", card, choice1, choice2, choice3, smithyTest, handpos, &bonus);
call    0 returned 100%
        1:   68:	return_val=cardEffect(card, choice1, choice2, choice3, smithyTest, handpos, &bonus);
call    0 returned 100%
        1:   69:	actHCA=smithyTest->handCount[rp];
        1:   70:	printf("--STEP 1: Checking hand counts--\n");
call    0 returned 100%
        1:   71:	if (actHCA==exHCA)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   72:	{
    #####:   73:		printf("SUCCESS: new handcount is %i\n", smithyTest->handCount[rp]);
call    0 never executed
        -:   74:	}
        -:   75:	else
        -:   76:	{
        1:   77:		printf("FAILURE: handcount has %i cards instead of required %i\n", smithyTest->handCount[rp], save->handCount[rp]+2);
call    0 returned 100%
        -:   78:	}
        1:   79:	printPlayerHand(rp, smithyTest);
call    0 returned 100%
        1:   80:	printf("--STEP 2: Checking that expected played card count matches actual played card count--\n");
call    0 returned 100%
        1:   81:	if (exPCCA!=smithyTest->playedCardCount)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   82:	{
    #####:   83:		printf("FAILURE: Expeted %i, got %i\n", exPCCA, smithyTest->playedCardCount);
call    0 never executed
        -:   84:	}
        1:   85:	else if (exPCCA==smithyTest->playedCardCount)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   86:	{
        1:   87:		printf("SUCCESS: Expected %i, got %i\n", exPCCA, smithyTest->playedCardCount);
call    0 returned 100%
        -:   88:	}
        1:   89:	printf("--CHECKING DISCARD FUNCTION--\n");
call    0 returned 100%
        -:   90:	
        1:   91:	printf("Checking that expected card was removed to 'played cards' from the deck for 5 test cases of handPos being 0 through %i\n", save->handCount[rp]);
call    0 returned 100%
        -:   92:	int i;
        1:   93:	int firstHC=save->handCount[rp];
        1:   94:	struct gameState *saveTwo=newGame();
call    0 returned 100%
        1:   95:	*saveTwo=*smithyTest;
        6:   96:	for (i=0; i < firstHC; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   97:	{
        5:   98:		printf("--TEST CASE %i for handpost %i--\n", i+2, i);
call    0 returned 100%
        5:   99:		handpos=i;
        5:  100:		return_val=cardEffect(card, choice1, choice2, choice3, smithyTest, handpos, &bonus);
call    0 returned 100%
        5:  101:		if (smithyTest->playedCards[smithyTest->playedCardCount-1]==save->hand[rp][handpos])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  102:		{
        5:  103:			printf("SUCCESS: last played card matches saved hand in position %i: %i==%i\n", handpos, smithyTest->playedCards[smithyTest->playedCardCount-1], save->hand[rp][handpos]);
call    0 returned 100%
        -:  104:		}
        -:  105:		else
        -:  106:		{
    #####:  107:			printf("FAILURE: last played card does NOT match saved hand in position %i: %i!=%i\n", handpos, smithyTest->playedCards[smithyTest->playedCardCount-1], save->hand[rp][handpos]);
call    0 never executed
        -:  108:		}
        5:  109:		*smithyTest=*save;
        -:  110:	}
        1:  111:	*smithyTest=*saveTwo;
        1:  112:	printf("\n\n\n----FINISHED ALL TESTS--\n");
call    0 returned 100%
        -:  113:	
        -:  114:	
        1:  115:	return 0;
        -:  116:}
        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include "test_helpers.h"
function main called 1 returned 100% blocks executed 93%
        1:    9:int main(int argc, char *argv[]) 
        -:   10:{
        1:   11:	printf("----STARTING TESTS----\n\n\n");
call    0 returned 100%
        1:   12:	printf("----Welcome to cardtest2.c----\n");
call    0 returned 100%
        1:   13:	printf("----We will test the Adventurer card in this unit test----\n");
call    0 returned 100%
        1:   14:	printf("----Adventurer is an Action card from the Base Set----\n");
call    0 returned 100%
        1:   15:	printf("-----It is a terminal Action card that digs for Treasure cards in the deck-----\n");
call    0 returned 100%
        1:   16:	printf("----TEST 1: If there is treasure in the players deck it should draw it-----\n");
call    0 returned 100%
        -:   17:	
        1:   18:	struct gameState *testAdventurer=newGame();
call    0 returned 100%
        -:   19:	//int kc_ac[10]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};	
        1:   20:	int* kc_ac=kingdomCards(adventurer, smithy, embargo, village, minion, mine, cutpurse, sea_hag, tribute, baron);
call    0 returned 100%
        1:   21:	int numPlayers=2;
        1:   22:	int randomSeed=1234;
        -:   23:
        1:   24:	int card=adventurer;
        1:   25:	int choice1=0;
        1:   26:	int choice2=0; 
        1:   27:	int choice3=0;
        1:   28:	int handPos=0;
        1:   29:	int bonus=0;
        -:   30:	
        -:   31:	//relevant player we're testing.
        1:   32:	int rp=-1;	
        1:   33:	initializeGame(numPlayers, kc_ac, randomSeed, testAdventurer);
call    0 returned 100%
        -:   34:	
        1:   35:	rp=whoseTurn(testAdventurer);
call    0 returned 100%
        1:   36:	testAdventurer->hand[rp][handPos]=adventurer;
        1:   37:	printSupplyCount(testAdventurer);
call    0 returned 100%
        -:   38:	
        1:   39:	struct gameState *save=newGame();
call    0 returned 100%
        1:   40:	*save=*testAdventurer;
        -:   41://	printPlayerDeck(rp, testAdventurer);
        1:   42:	printf("PLAYER: %i\n", rp);
call    0 returned 100%
        1:   43:	printf("At this point, we know that the player should have only treasure in the deck; so we expect that the hand count before and after should differ by two counts\n");
call    0 returned 100%
        1:   44:	printf("Player's hand count before: %i\n", testAdventurer->handCount[rp]);
call    0 returned 100%
        1:   45:	printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        1:   46:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);	
call    0 returned 100%
        -:   47:	/*if (checkLastPlayed(adventurer, testAdventurer)==1)
        -:   48:	{
        -:   49:		printf("SUCCESS: Last played card was adventurer\n");
        -:   50:	}
        -:   51:	else {
        -:   52:		printf("FAILURE: last played card was: %i\n", testAdventurer->playedCards[testAdventurer->playedCardCount]);
        -:   53:	}
        -:   54:	if (checkLastDiscard(rp, card, testAdventurer)==1)
        -:   55:	{
        -:   56:		printf("LAST DISCARDED CARD IS %i\n", testAdventurer->discard[rp][testAdventurer->discardCount[rp]]);
        -:   57:	}*/
        -:   58:
        1:   59:	printf("Player's hand count after: %i\n", testAdventurer->handCount[rp]);
call    0 returned 100%
        1:   60:	if (save->handCount[rp]+2==testAdventurer->handCount[rp])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   61:	{
        1:   62:		printf("SUCCESS: correct number of items incremented from the count\n");
call    0 returned 100%
        -:   63:		
        -:   64:	}
        -:   65:	else 
        -:   66:	{
    #####:   67:		printf("FAILURE: incorrect number of items incremented from the count\n");
call    0 never executed
        -:   68:	}
        1:   69:	printf("Checking player deck count\n");
call    0 returned 100%
        1:   70:	if (save->deckCount[rp]-2==testAdventurer->deckCount[rp])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   71:	{
        1:   72:		printf("SUCCESS: correct number of treasure cards mined\n");
call    0 returned 100%
        -:   73:	}
        -:   74:	else 
        -:   75:	{
    #####:   76:		printf("FAILURE: incorrect number of treasure cards mined\n");
call    0 never executed
        -:   77:	}
        1:   78:	printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        1:   79:	printf("TEST CASE 2: No treasure in deck; \n");
call    0 returned 100%
        1:   80:	*testAdventurer=*save;
        1:   81:	rp=whoseTurn(testAdventurer);
call    0 returned 100%
        1:   82:	printf("Setting all cards for player %i's deck to curse\n", rp);
call    0 returned 100%
        1:   83:	int i=0;
        7:   84:	for (i=0; i < testAdventurer->deckCount[rp]+1; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   85:	{
        6:   86:		testAdventurer->deck[rp][i]=0;
        -:   87:	}
        1:   88:	printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        1:   89:	printf("Discard count before call %i\n", testAdventurer->discardCount[rp]);
call    0 returned 100%
        1:   90:	printf("Testing card effect with only curse cards in deck; expecting discard count to increment by 5\n");
call    0 returned 100%
        1:   91:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);
call    0 returned 100%
        1:   92:	printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        1:   93:	printPlayerHand(rp, testAdventurer);
call    0 returned 100%
        1:   94:	if (save->discardCount[rp]+5==testAdventurer->discardCount[rp])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   95:	{
    #####:   96:		printf("SUCCESS: discard count is %i\n", testAdventurer->discardCount[rp]);
call    0 never executed
        -:   97:	}
        -:   98:	else 
        -:   99:	{
        1:  100:		printf("FAILURE: discard count is %i\n", testAdventurer->discardCount[rp]);
call    0 returned 100%
        -:  101:	}
        1:  102:	printDiscard(rp, testAdventurer);
call    0 returned 100%
        -:  103:	/*
        -:  104:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);	
        -:  105:	printPlayerDeck(rp, testAdventurer);
        -:  106:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);	
        -:  107:	printPlayerDeck(rp, testAdventurer);*/
        1:  108:	printf("\n\n\n----FINISHED ALL TESTS--\n");
call    0 returned 100%
        1:  109:	return 0;
        -:  110:
        -:  111:}
        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include "test_helpers.h"
        -:    9:
        -:   10:void testBuys(struct gameState *prev, struct gameState *after, int incBy);
function main called 1 returned 100% blocks executed 81%
        1:   11:int main(int argc, char *argv[]) 
        -:   12:{
        1:   13:	printf("----STARTING TESTS----\n\n\n");
call    0 returned 100%
        1:   14:	printf("----Welcome to cardtest3.c----\n");
call    0 returned 100%
        1:   15:	printf("----We will test the Council card in this unit test---\n");
call    0 returned 100%
        1:   16:	printf("---Council is an Action card from the Base Set----\n");
call    0 returned 100%
        1:   17:	printf("---It is a terminal Action card that forces each player to darw a card---\n");
call    0 returned 100%
        1:   18:	printf("---Itelf, it draws 4 cards for the player and give the player a buy---\n");
call    0 returned 100%
        -:   19:	
        -:   20:	
        -:   21:	/*Council Room is an Action card from the Base set. It is a terminal card draw, meaning it provides +Cards but no +Action. */
        -:   22:	//printf("Checks current hand count: TRUE\n");
        -:   23:	//printf("Checks other players card drawn: TRUE\n");
        -:   24:	//printf("Checks played card pile: TRUE\n");
        -:   25:	
        1:   26:	int card=council_room;
        1:   27:	int choice1=0;
        1:   28:	int choice2=0;
        1:   29:	int choice3=0;
        1:   30:	int handPos=0;
        1:   31:	int bonus=0;
        1:   32:	int numPlayers=3;
        1:   33:	int randomSeed=666;
        1:   34:	int *kc_cc=kingdomCards(council_room, adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, adventurer);
call    0 returned 100%
        1:   35:	struct gameState *council_roomTest=newGame();
call    0 returned 100%
        1:   36:	struct gameState *saveState=newGame();
call    0 returned 100%
        -:   37:	//rp=relevant player
        1:   38:	int rp=council_roomTest->whoseTurn;
        -:   39:	
        1:   40:	initializeGame(numPlayers, kc_cc, randomSeed, council_roomTest);
call    0 returned 100%
        1:   41:	printf("---TEST CASE 1: Inserting a council_room card into player %i's deck at hand position %i---\n", rp+1, handPos);
call    0 returned 100%
        -:   42:	
        1:   43:	printf("----TESTING WITH A DECK COUNT OF 10 COPPERS FOR EACH PLAYER---\n");
call    0 returned 100%
        1:   44:	int i=0;
        4:   45:	for (i=0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   46:	{
        3:   47:		council_roomTest->deckCount[i]=10;
        -:   48:		int j;
       33:   49:		for (j=0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   50:		{
       30:   51:			council_roomTest->deck[i][j]=copper;
        -:   52:		}
        -:   53:		
        -:   54:	}
        1:   55:	int expected_hand_count_after=4;//draw 4
        1:   56:	int actual_hand_count_after=0;
        1:   57:	council_roomTest->hand[rp][handPos]=card;
        1:   58:	council_roomTest->handCount[rp]=1;
        1:   59:	printf("Player %i hand count before running council_case: %i\n", rp+1, council_roomTest->handCount[rp]);
call    0 returned 100%
        1:   60:	printf("Player %i hand at handPos %i before running council_case: %i\n", rp+1, handPos, council_roomTest->hand[rp][handPos]);
call    0 returned 100%
        -:   61:	
        1:   62:	*saveState=*council_roomTest;
        -:   63:	//council_roomTest->handCount[rp]=1;
        -:   64:	//council_roomTest->hand[rp][council_room]=1;
        -:   65:
        -:   66:	//printf("player hand count before is: %i, hand is %i\n", council_roomTest->handCount[rp], council_roomTest->hand[rp][council_room]);
        -:   67:	
        1:   68:	cardEffect(card, choice1, choice2, choice3, council_roomTest, handPos, &bonus);
call    0 returned 100%
        1:   69:	printf("Player %i hand count after running council_case: %i\n", rp+1, council_roomTest->handCount[rp]);
call    0 returned 100%
        1:   70:	printf("New played card count is %i\n", council_roomTest->playedCardCount);
call    0 returned 100%
        -:   71:	
        1:   72:	printf("Played card is %i, should be %i\n", council_roomTest->playedCards[council_roomTest->playedCardCount-1], card);
call    0 returned 100%
        1:   73:	actual_hand_count_after=council_roomTest->handCount[rp];
        -:   74:	
        -:   75:
        1:   76:	if (saveState->deckCount[rp]<council_roomTest->deckCount[rp])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   77:	{
    #####:   78:		printf("SUCCESS deck count is decremented: %i\n", council_roomTest->deckCount[rp]);
call    0 never executed
    #####:   79:		if (saveState->deckCount[rp]-4==council_roomTest->deckCount[rp])
branch  0 never executed
branch  1 never executed
        -:   80:		{
    #####:   81:			printf("SUCCESS deck count is decremented correctly by 4: %i\n", council_roomTest->deckCount[rp]);
call    0 never executed
        -:   82:		}
        -:   83:		else 
        -:   84:		{
    #####:   85:			printf("FAILURE deck count is decremented incorrectly by another factor: %i\n", council_roomTest->deckCount[rp]);
call    0 never executed
        -:   86:		}
        -:   87:	}
        -:   88:	
        -:   89:	
        -:   90:	//TEST HAND COUNT AFTER:
        1:   91:	if (expected_hand_count_after==actual_hand_count_after)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   92:	{
    #####:   93:		printf("SUCCESS: Hand count after, %i, matches expected hand count, %i\n", actual_hand_count_after, expected_hand_count_after);
call    0 never executed
        -:   94:	}
        1:   95:	else if (expected_hand_count_after!=actual_hand_count_after)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   96:	{
        1:   97:		printf("FAILURE: Hand count after, %i, does NOT match expected hand count, %i\n", actual_hand_count_after, expected_hand_count_after);
call    0 returned 100%
        -:   98:	}
        -:   99:
        -:  100:	//printf("")
        -:  101:
        -:  102:	//printf("INTERNAL RULES FOR COUNCIL CASE\n");
        -:  103:	//printf("BUSINESS RULES FOR COUNCIL CASE\n");
        -:  104:	//cost: 5 coins
        -:  105:	
        -:  106:	//type: action 
        -:  107:	//set: base
        -:  108:	//Rule1: other players 
        -:  109:	//Rule2: other players draw a card
        -:  110:	//Rule3: discard the card
        -:  111:	//attributes; terminal card draw
        -:  112:	
        1:  113:	printf("----STEP 3: CHECKING THAT OTHER PLAYERS DREW CARDS---\n");
call    0 returned 100%
        -:  114:
        1:  115:	printf(" PREV HAND COUNT FOR PLAYER 1 %i\n", saveState->handCount[1]);
call    0 returned 100%
        4:  116:	for (i=0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  117:	{
        3:  118:		if (i!=rp)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  119:		{
        2:  120:			if (saveState->handCount[i]+1==council_roomTest->handCount[i])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  121:			{
        2:  122:				printf("SUCCESS: player %i hand incremented by one: %i\n", i, council_roomTest->handCount[i]);
call    0 returned 100%
        -:  123:			}
    #####:  124:			else if (saveState->handCount[i]!=council_roomTest->handCount[i]+1)
branch  0 never executed
branch  1 never executed
        -:  125:			{
    #####:  126:				printf("FAILURE: player %i hand NOT incremented by one:  %i\n", i, council_roomTest->handCount[i]);			
call    0 never executed
        -:  127:			}
        -:  128:		}
        -:  129:	}
        1:  130:	if (checkLastPlayed(council_room, council_roomTest)==1)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  131:	{
        1:  132:		printf("SUCCESS: last played card is council_room\n");
call    0 returned 100%
        -:  133:	}
    #####:  134:	else if (checkLastPlayed(council_room, council_roomTest)==0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  135:	{
    #####:  136:		printf("FAILURE last played card is enumed %i\n", council_roomTest->playedCards[council_roomTest->playedCardCount-1]);
call    0 never executed
        -:  137:	}
        1:  138:	testBuys(saveState, council_roomTest, 1);
call    0 returned 100%
        -:  139:
        1:  140:	printf("\n\n\n----FINISHED ALL TESTS--\n");
call    0 returned 100%
        1:  141:	return 0;	
        -:  142:}
function testBuys called 1 returned 100% blocks executed 75%
        1:  143:void testBuys(struct gameState *prev, struct gameState *after, int incBy)
        -:  144:{
        1:  145:	if (prev->numBuys+incBy==after->numBuys)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  146:	{
        1:  147:		printf("SUCCESS: num buys incremented by %i\n", incBy);
call    0 returned 100%
        -:  148:	}
        -:  149:	else 
        -:  150:	{
    #####:  151:		printf("FAILURE: num buys not incremented by %i; prev numbuys=%i, current numBuys=%i\n", incBy, prev->numBuys, after->numBuys);
call    0 never executed
        -:  152:	}
        -:  153:	
        1:  154:}
        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include "test_helpers.h"
        -:    9:
function main called 1 returned 100% blocks executed 72%
        1:   10:int main(int argc, char *argv[]) 
        -:   11:{
        -:   12:
        -:   13:	//an introduction
        1:   14:	printf("----Welcome to cardtest4.c-----\n");
call    0 returned 100%
        1:   15:	printf("----This file facilitates unit tests for the Baron Card---\n");
call    0 returned 100%
        1:   16:	printf("----Baron is an Action card from the Intigue Set----\n");
call    0 returned 100%
        1:   17:	printf("----To run, we need to have a current player, a game state, and a parameter called 'choice1' which tells us whether or not to 'discard' the estate card, which is enumerated in the CARD enum by '1'.\n");
call    0 returned 100%
        -:   18:	//end introduction
        -:   19:	//THING TO NOTE:
        -:   20:		//1. If estate exists, it is in testBaron->hand[rp][0...n] where n is the size of the hand i.e. testBaron->handCount[rp]
        -:   21:	//THINGS TO TEST:
        -:   22:		//1. Number of buys before and after should increase by 1
        -:   23:		//2. That baron works and does NOT discard estate when choice1 is 0
        -:   24:		//3. That baron works and DOES discard estate when choice1 is 1
        -:   25:			//3.1. If estate is found, that coins have 4 added to them
        -:   26:			//3.2 That discard pile has item added and that the discard count has gone up
        -:   27:
        -:   28:		//4. That the state doesn't change if estate does not exist to be discarded.
        -:   29:		//initialize necessary items:
        1:   30:	int numPlayers=3;
        1:   31:	int kingdomCards[10]={adventurer, smithy, embargo, village, minion, mine, cutpurse, sea_hag, tribute, baron};
        1:   32:	int randomSeed=69;
        1:   33:	struct gameState *testBaron=newGame();
call    0 returned 100%
        1:   34:	int card=baron;
        1:   35:	int choice1=0;
        1:   36:	int choice2=0;
        1:   37:	int choice3=0;
        1:   38:	int handPos=0;
        1:   39:	int bonus=0;
        1:   40:	int rp=0;
        1:   41:	initializeGame(numPlayers, kingdomCards, randomSeed, testBaron);
call    0 returned 100%
        1:   42:	rp=whoseTurn(testBaron);
call    0 returned 100%
        1:   43:	testBaron->hand[rp][handPos]=baron;
        1:   44:	int rpHandCountBefore=testBaron->handCount[rp];
        1:   45:	int rpHandCountAfter=0;
        -:   46:	int i;
        6:   47:	for (i=0; i <rpHandCountBefore; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   48:	{
        5:   49:		printf("Before card %i is %i\n", i, testBaron->hand[rp][i]);
call    0 returned 100%
        -:   50:	}
        1:   51:	int numCoinsBefore=testBaron->coins;
        1:   52:	int numCoinsAfter=0;
        1:   53:	int discardPileBefore=testBaron->discardCount[rp];
        1:   54:	int discardPileAfter=0;
        1:   55:	printf("--TESTING THAT: 1. Number of buys before and after should increase by 1----\n");
call    0 returned 100%
        1:   56:	int prevNumBuys=testBaron->numBuys;
        1:   57:	int expNumBuys=prevNumBuys+1;
        1:   58:	int aftNumBuys=0;
        1:   59:	cardEffect(card, choice1, choice2, choice3, testBaron, handPos, &bonus);
call    0 returned 100%
        1:   60:	aftNumBuys=testBaron->numBuys;
        1:   61:	printf("Number of Buys Before: %i\n", prevNumBuys);
call    0 returned 100%
        1:   62:	printf("Number of Buys After: %i\n", aftNumBuys);
call    0 returned 100%
        1:   63:	printf("Expected Num Buys After: %i\n", expNumBuys);
call    0 returned 100%
        1:   64:	if (expNumBuys!=aftNumBuys)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   65:	{
        1:   66:		printf("FAILURE: expected and actual number of buys don't match\n");
call    0 returned 100%
        -:   67:	}
        -:   68:	else 
        -:   69:	{
    #####:   70:		printf("SUCCESS: expected and actual number of buys match\n");		
call    0 never executed
        -:   71:	}
        1:   72:	printf("TESTING THAT: 2.That baron works and does NOT discard estate when choice1 is 0\n");
call    0 returned 100%
        1:   73:	rpHandCountAfter=testBaron->handCount[rp];
        1:   74:	if (rpHandCountAfter==rpHandCountBefore)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   75:	{
        1:   76:		printf("SUCCESS: handcount is the same before and after\n");
call    0 returned 100%
        6:   77:		for (i=0; i <rpHandCountAfter; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:   78:		{
        5:   79:			printf("After card %i is %i\n", i, testBaron->hand[rp][i]);
call    0 returned 100%
        -:   80:		}
        -:   81:
        -:   82:	}
    #####:   83:	else if (rpHandCountAfter!=rpHandCountBefore)
branch  0 never executed
branch  1 never executed
        -:   84:	{
    #####:   85:		printf("FAILURE: handcount is NOT the same before and after\n");
call    0 never executed
    #####:   86:		for (i=0; i <rpHandCountAfter; i++)
branch  0 never executed
branch  1 never executed
        -:   87:		{
    #####:   88:			printf("After card %i is %i\n", i, testBaron->hand[rp][i]);
call    0 never executed
        -:   89:		}
        -:   90:
        -:   91:	}
        1:   92:	printf("TESTING THAT: 3.That baron works and DOES discard estate when choice1 is 1\n");
call    0 returned 100%
        1:   93:	choice1=1;
        1:   94:	discardPileBefore=testBaron->discardCount[rp];
        1:   95:	cardEffect(card, choice1, choice2, choice3, testBaron, handPos, &bonus);
call    0 returned 100%
        1:   96:	rpHandCountAfter=testBaron->handCount[rp];
        1:   97:	if (rpHandCountAfter!=rpHandCountBefore)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   98:	{
        1:   99:		printf("SUCCESS: handcount is different efore and after\n");
call    0 returned 100%
        5:  100:		for (i=0; i <rpHandCountAfter; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  101:		{
        4:  102:			printf("After card %i is %i\n", i, testBaron->hand[rp][i]);
call    0 returned 100%
        -:  103:		}
        1:  104:		printf("TESTING THAT: 3.1. If estate is found, that coins have 4 added to them\n");
call    0 returned 100%
        1:  105:		numCoinsAfter=testBaron->coins;
        1:  106:		if (numCoinsAfter==numCoinsBefore)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  107:		{
    #####:  108:			printf("FAILURE: number of coins unchanged\n");
call    0 never executed
        -:  109:		}
        1:  110:		else if (numCoinsAfter==numCoinsBefore+4)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  111:		{
        1:  112:			printf("SUCCESS: number of coins incremented by 4\n");
call    0 returned 100%
        -:  113:		}
        -:  114:		else
        -:  115:		{
    #####:  116:			printf("FAILURE: number of coins differs but not by correct fator\n");
call    0 never executed
        -:  117:		}
        -:  118:
        -:  119:	}
    #####:  120:	else if (rpHandCountAfter==rpHandCountBefore)
branch  0 never executed
branch  1 never executed
        -:  121:	{
    #####:  122:		printf("FAILURE: handcount is NOT different before and after\n");
call    0 never executed
    #####:  123:		for (i=0; i <rpHandCountAfter; i++)
branch  0 never executed
branch  1 never executed
        -:  124:		{
    #####:  125:			printf("After card %i is %i\n", i, testBaron->hand[rp][i]);
call    0 never executed
        -:  126:		}
        -:  127:	
        -:  128:	}
        1:  129:	printf("TESTING THAT: 3.2 That discard pile has item added and that the discard count has gone up\n");
call    0 returned 100%
        1:  130:	discardPileAfter=testBaron->discardCount[rp];
        1:  131:	if (discardPileAfter==discardPileBefore)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  132:	{
    #####:  133:		printf("FAILURE: discard count unchanged\n");
call    0 never executed
        -:  134:	}
        1:  135:	else if (discardPileAfter==discardPileBefore+1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  136:	{
        1:  137:		printf("SUCCESS: discard count incremented by one\n");
call    0 returned 100%
        -:  138:	}
        -:  139:	else 
        -:  140:	{
    #####:  141:		printf("FAILURE discard counts differ but by incorrect factor: before %i, after %i\n", discardPileBefore, discardPileAfter);
call    0 never executed
        -:  142:	}
        1:  143:	printf("TESTING THAT: 4. That the state doesn't change if estate does not exist to be discarded.\n");
call    0 returned 100%
        1:  144:	printf("SETTING ALL CARDS TO CURSE CARDS\n");
call    0 returned 100%
        1:  145:	rp=whoseTurn(testBaron);
call    0 returned 100%
        1:  146:	rpHandCountBefore=testBaron->handCount[rp];
        5:  147:	for (i=0; i <rpHandCountBefore; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  148:	{
        4:  149:		testBaron->hand[rp][i]=0;
        -:  150:	}
        1:  151:	cardEffect(card, choice1, choice2, choice3, testBaron, handPos, &bonus);
call    0 returned 100%
        1:  152:	rpHandCountAfter=testBaron->handCount[rp];
        -:  153:	
        1:  154:	rpHandCountAfter=testBaron->handCount[rp];
        1:  155:	if (rpHandCountAfter==rpHandCountBefore)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  156:	{
        1:  157:		printf("SUCCESS: handcount is the same before and after\n");
call    0 returned 100%
        5:  158:		for (i=0; i <rpHandCountAfter; i++)
branch  0 taken 80%
branch  1 taken 20%
        -:  159:		{
        4:  160:			printf("After card %i is %i\n", i, testBaron->hand[rp][i]);
call    0 returned 100%
        -:  161:		}
        -:  162:
        -:  163:		}
    #####:  164:		else if (rpHandCountAfter!=rpHandCountBefore)
branch  0 never executed
branch  1 never executed
        -:  165:		{
    #####:  166:			printf("FAILURE: handcount is NOT the same before and after\n");
call    0 never executed
    #####:  167:			for (i=0; i <rpHandCountAfter; i++)
branch  0 never executed
branch  1 never executed
        -:  168:			{
    #####:  169:				printf("After card %i is %i\n", i, testBaron->hand[rp][i]);
call    0 never executed
        -:  170:			}
        -:  171:
        -:  172:		}
        1:  173:	printf("---All tests finished---\n\n");
call    0 returned 100%
        1:  174:	return 0;
        -:  175:	
        -:  176:	
        -:  177:}
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include "test_helpers.h"
        -:    8:
        -:    9://REFACORED CASES:
        -:   10://SMITHY CARD
function smithy_case called 6 returned 100% blocks executed 100%
        6:   11:int smithy_case(int currentPlayer, struct gameState* state, int handPos)
        -:   12:{
        -:   13:  //+3 cards
        -:   14:  int i;
        -:   15:  //BUG 4: let the user draw 4 cards instead of 3;
        -:   16:  //for (i = 0; i < 3; i++)
       30:   17:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   18:	{  
        -:   19:      
       24:   20:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:   21:	}
        -:   22:			
        -:   23:  //discard card from hand
        6:   24:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        6:   25:  return 0;
        -:   26:}
        -:   27://ADVENTURE CARD
function adventurer_case called 2 returned 100% blocks executed 100%
        2:   28:int adventurer_case(int currentPlayer, struct gameState* state, int cardDrawn, int drawntreasure, int* temphand, int z)
        -:   29:{
       14:   30:  while(drawntreasure<2)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   31:  {
       10:   32:    if (state->deckCount[currentPlayer] <1)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -:   33:    {
        -:   34:      //if the deck is empty we need to shuffle discard and add to deck
        3:   35:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:   36:    }
       10:   37:	  drawCard(currentPlayer, state);
call    0 returned 100%
       10:   38:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card
       10:   39:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:   40:    {
        4:   41:      drawntreasure++;
        -:   42:    }
        -:   43:    else
        -:   44:    {
        -:   45:      //BUG 2: increases z BEFORE the end
        6:   46:     z++;
        6:   47:      temphand[z]=cardDrawn;
        6:   48:      state->handCount[currentPlayer]--; 
        -:   49:      //this should just remove the top card (the most recently drawn one).*/
        -:   50:      //z++;
        -:   51:    }
        -:   52:  }
       10:   53:  while(z-1>=0)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   54:  {
        6:   55:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6:   56:	  z=z-1;
        -:   57:  }
        2:   58:  return 0;
        -:   59:		
        -:   60:}
        -:   61://BARON CARD
function baron_case called 3 returned 100% blocks executed 92%
        3:   62:int baron_case(int currentPlayer, struct gameState* state, int choice1)
        -:   63:{
        -:   64:    //BUG 1: increase buys by 2
        3:   65:    state->numBuys++;
        3:   66:    state->numBuys++;
        -:   67:    
        -:   68:    //state->numBuys++;//Increase buys by 1!
        3:   69:    if (choice1 > 0)//Boolean true or going to discard an estate
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:   70:    {
        2:   71:      int p = 0;//Iterator for hand!
        2:   72:      int card_not_discarded = 1;//Flag for discard set!
       12:   73:      while(card_not_discarded)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   74:      {
        8:   75:        if (state->hand[currentPlayer][p]==estate)//Found an estate card!
branch  0 taken 13% (fallthrough)
branch  1 taken 88%
        -:   76:        {
        1:   77:          state->coins += 4;//Add 4 coins to the amount of coins
        1:   78:          state->discard[currentPlayer][state->discardCount[currentPlayer]]=state->hand[currentPlayer][p];
        1:   79:          state->discardCount[currentPlayer]++;
        5:   80:      for (;p < state->handCount[currentPlayer]; p++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   81:      {
        4:   82:        state->hand[currentPlayer][p]=state->hand[currentPlayer][p+1];
        -:   83:      }
        1:   84:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:   85:      state->handCount[currentPlayer]--;
        1:   86:      card_not_discarded = 0;//Exit the loop
        -:   87:    }
        7:   88:    else if (p > state->handCount[currentPlayer]){
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:   89:      if(DEBUG) {
        -:   90:        printf("No estate cards in your hand, invalid choice\n");
        -:   91:        printf("Must gain an estate if there are any\n");
        -:   92:      }
        1:   93:      if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   94:        gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
        1:   95:        state->supplyCount[estate]--;//Decrement estates
        1:   96:        if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   97:    isGameOver(state);
call    0 never executed
        -:   98:        }
        -:   99:      }
        1:  100:      card_not_discarded = 0;//Exit the loop
        -:  101:    }
        -:  102:          
        -:  103:    else{
        6:  104:      p++;//Next card
        -:  105:    }
        -:  106:  }
        -:  107:      }
        -:  108:          
        -:  109:      else{
        1:  110:  if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:  111:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        1:  112:    state->supplyCount[estate]--;//Decrement Estates
        1:  113:    if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  114:      isGameOver(state);
call    0 never executed
        -:  115:    }
        -:  116:  }
        -:  117:      }
        -:  118:      
        -:  119:      
        3:  120:      return 0;
        -:  121:}
        -:  122:
        -:  123:
        -:  124://COUNCIL CARD
function council_case called 1 returned 100% blocks executed 100%
        1:  125:int council_case(int currentPlayer, struct gameState* state, int handPos)
        -:  126:{
        -:  127:   //+4 Cards
        -:  128:  int i;
        -:  129:  //BUG 3: Draw 5 cards instead of 4
        -:  130:  //for (i = 0; i < 4; i++)
        1:  131:  printf("Item at hand pos %i is for player %i is %i\n", handPos, currentPlayer+1, state->hand[currentPlayer][handPos]);
call    0 returned 100%
        6:  132:  for (i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  133:  	{
        -:  134:
        5:  135:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  136:      	  //printf("Player %i, hand count: %i\n", currentPlayer+1, state->handCount[currentPlayer]);
        5:  137:      printf("Item at hand pos %i is for player %i is %i\n", handPos, currentPlayer+1, state->hand[currentPlayer][handPos]);
call    0 returned 100%
        -:  138:      //printPlayerHand(currentPlayer, state);
        -:  139:  	}
        -:  140:  //printPlayerHand(currentPlayer, state);
        -:  141:  			
        -:  142:  //+1 Buy
        1:  143:  state->numBuys++;
        -:  144:  	//Each other player draws a card
        4:  145:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  146:  	{
        3:  147:  	  if ( i != currentPlayer )
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  148:  	    {
        2:  149:  	      drawCard(i, state);
call    0 returned 100%
        -:  150:  	    }
        -:  151:  	}
        -:  152:  			
        -:  153:  //put played card in played card pile
        1:  154:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  155:  
        -:  156:  			
        1:  157:  return 0;
        -:  158:}
        -:  159://FEAST CARD
function feast_case called 0 returned 0% blocks executed 0%
    #####:  160:int feast_case(int currentPlayer, struct gameState* state, int* temphand, int choice1)
        -:  161:{
        -:  162:     int i, x;
        -:  163:    //gain card with cost up to 5
        -:  164:  //Backup hand
    #####:  165:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  166:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  167:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  168:  }
        -:  169:  //Backup hand
        -:  170:
        -:  171:  //Update Coins for Buy
    #####:  172:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  173:  x = 1;//Condition to loop on
    #####:  174:  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  175:  if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  176:	  if (DEBUG)
        -:  177:	    printf("None of that card left, sorry!\n");
        -:  178:
        -:  179:	  if (DEBUG){
        -:  180:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  181:	  }
        -:  182:	}
    #####:  183:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  184:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  185:
        -:  186:	  if (DEBUG){
        -:  187:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  188:	  }
        -:  189:	}
        -:  190:	else{
        -:  191:
        -:  192:	  if (DEBUG){
        -:  193:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  194:	  }
        -:  195:
    #####:  196:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  197:	  x = 0;//No more buying cards
        -:  198:
        -:  199:	  if (DEBUG){
        -:  200:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  201:	  }
        -:  202:
        -:  203:	}
        -:  204:  }     
        -:  205:
        -:  206:  //Reset Hand
    #####:  207:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  208:	state->hand[currentPlayer][i] = temphand[i];
    #####:  209:	temphand[i] = -1;
        -:  210:  }
        -:  211:  //Reset Hand
        -:  212:  			
    #####:  213:  return 0;
        -:  214:
        -:  215:}
function compare called 335 returned 100% blocks executed 83%
      335:  216:int compare(const void* a, const void* b) 
        -:  217:{
      335:  218:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  219:    return 1;
      335:  220:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       90:  221:    return -1;
      245:  222:  return 0;
        -:  223:}
        -:  224:
function newGame called 17 returned 100% blocks executed 100%
       17:  225:struct gameState* newGame() 
        -:  226:{
       17:  227:  struct gameState* g = malloc(sizeof(struct gameState));
       17:  228:  return g;
        -:  229:}
        -:  230:
function kingdomCards called 13 returned 100% blocks executed 100%
       13:  231:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  232:		  int k8, int k9, int k10) {
       13:  233:  int* k = malloc(10 * sizeof(int));
       13:  234:  k[0] = k1;
       13:  235:  k[1] = k2;
       13:  236:  k[2] = k3;
       13:  237:  k[3] = k4;
       13:  238:  k[4] = k5;
       13:  239:  k[5] = k6;
       13:  240:  k[6] = k7;
       13:  241:  k[7] = k8;
       13:  242:  k[8] = k9;
       13:  243:  k[9] = k10;
       13:  244:  return k;
        -:  245:}
        -:  246:
function initializeGame called 12 returned 100% blocks executed 98%
       12:  247:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  248:		   struct gameState *state) {
        -:  249:
        -:  250:  int i;
        -:  251:  int j;
        -:  252:  int it;			
        -:  253:  //set up random number generator
       12:  254:  SelectStream(1);
call    0 returned 100%
       12:  255:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  256:  
        -:  257:  //check number of players
       12:  258:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  259:    {
        1:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //set number of players
       11:  264:  state->numPlayers = numPlayers;
        -:  265:
        -:  266:  //check selected kingdom cards are different
      102:  267:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  268:    {
     1021:  269:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  270:        {
      930:  271:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  272:	    {
        2:  273:	      return -1;
        -:  274:	    }
        -:  275:        }
        -:  276:    }
        -:  277:  //initialize supply
        -:  278:  ///////////////////////////////
        -:  279:
        -:  280:  //set number of Curse cards
        9:  281:  if (numPlayers == 2)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  282:    {
        -:  283:      //printf("supply count: curses\n");
        6:  284:      state->supplyCount[curse] = 10;
        -:  285:     //printf("num curses: %i",  state->supplyCount[curse]);
        -:  286:    }
        3:  287:  else if (numPlayers == 3)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  288:    {
        2:  289:      state->supplyCount[curse] = 20;
        -:  290:    }
        -:  291:  else
        -:  292:    {
        1:  293:      state->supplyCount[curse] = 30;
        -:  294:    }
        -:  295:
        -:  296:  //set number of Victory cards
        9:  297:  if (numPlayers == 2)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  298:    {
        6:  299:      state->supplyCount[estate] = 8;
        6:  300:      state->supplyCount[duchy] = 8;
        6:  301:      state->supplyCount[province] = 8;
        -:  302:    }
        -:  303:  else
        -:  304:    {
        3:  305:      state->supplyCount[estate] = 12;
        3:  306:      state->supplyCount[duchy] = 12;
        3:  307:      state->supplyCount[province] = 12;
        -:  308:    }
        -:  309:
        -:  310:  //set number of Treasure cards
        9:  311:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  312:  state->supplyCount[silver] = 40;
        9:  313:  state->supplyCount[gold] = 30;
        -:  314:
        -:  315:  //set number of Kingdom cards
      189:  316:  for (i = adventurer; i <= treasure_map; i++)//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  317:  {
     1486:  318:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  319:    {
     1395:  320:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  321:      {
        -:  322:        //check if card is a 'Victory' Kingdom card
       89:  323:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  324:        {
       24:  325:          if (numPlayers == 2)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  326:          { 
        8:  327:            state->supplyCount[i] = 8; 
        -:  328:          }
        -:  329:          else
        -:  330:          { 
        4:  331:            state->supplyCount[i] = 12; 
        -:  332:          }
        -:  333:        }
        -:  334:	      else
        -:  335:        {
       77:  336:          state->supplyCount[i] = 10;
        -:  337:        }
       89:  338:	      break;
        -:  339:      }
        -:  340:	    else    //card is not in the set choosen for the game
        -:  341:      {
     1306:  342:        state->supplyCount[i] = -1;
        -:  343:      }
        -:  344:	   }
        -:  345:  }
        -:  346:
        -:  347:  ////////////////////////
        -:  348:  //supply intilization complete
        -:  349:
        -:  350:  //set player decks
       31:  351:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  352:  {
       22:  353:      state->deckCount[i] = 0;
       88:  354:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  355:      {
       66:  356:        state->deck[i][j] = estate;
       66:  357:        state->deckCount[i]++;
        -:  358:      }
      176:  359:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  360:      {
      154:  361:        state->deck[i][j] = copper;
      154:  362:        state->deckCount[i]++;
        -:  363:      }
        -:  364:  }
        -:  365:
        -:  366:  //shuffle player decks
       31:  367:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  368:    {
       22:  369:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  370:	{
    #####:  371:	  return -1;
        -:  372:	}
        -:  373:    }
        -:  374:
        -:  375:  //draw player hands
       31:  376:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  377:    {  
        -:  378:      //initialize hand size to zero
       22:  379:      state->handCount[i] = 0;
       22:  380:      state->discardCount[i] = 0;
        -:  381:      //draw 5 cards
        -:  382:      // for (j = 0; j < 5; j++)
        -:  383:      //	{
        -:  384:      //	  drawCard(i, state);
        -:  385:      //	}
        -:  386:    }
        -:  387:  
        -:  388:  //set embargo tokens to 0 for all supply piles
      252:  389:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  390:    {
      243:  391:      state->embargoTokens[i] = 0;
        -:  392:    }
        -:  393:
        -:  394:  //initialize first player's turn
        9:  395:  state->outpostPlayed = 0;
        9:  396:  state->phase = 0;
        9:  397:  state->numActions = 1;
        9:  398:  state->numBuys = 1;
        9:  399:  state->playedCardCount = 0;
        9:  400:  state->whoseTurn = 0;
        9:  401:  state->handCount[state->whoseTurn] = 0;
        -:  402:  //int it; move to top
        -:  403:
        -:  404:  //Moved draw cards to here, only drawing at the start of a turn
       54:  405:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       45:  406:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  407:  }
        -:  408:
        9:  409:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  410:
        9:  411:  return 0;
        -:  412:}
        -:  413:
function shuffle called 33 returned 100% blocks executed 100%
       33:  414:int shuffle(int player, struct gameState *state) {
        -:  415: 
        -:  416:
        -:  417:  int newDeck[MAX_DECK];
       33:  418:  int newDeckPos = 0;
        -:  419:  int card;
        -:  420:  int i;
        -:  421:
       33:  422:  if (state->deckCount[player] < 1)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
       10:  423:    return -1;
       23:  424:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  425:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  426:
      271:  427:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      225:  428:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      225:  429:    newDeck[newDeckPos] = state->deck[player][card];
      225:  430:    newDeckPos++;
      787:  431:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      562:  432:      state->deck[player][i] = state->deck[player][i+1];
        -:  433:    }
      225:  434:    state->deckCount[player]--;
        -:  435:  }
      248:  436:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      225:  437:    state->deck[player][i] = newDeck[i];
      225:  438:    state->deckCount[player]++;
        -:  439:  }
        -:  440:
       23:  441:  return 0;
        -:  442:}
        -:  443:
function playCard called 0 returned 0% blocks executed 0%
    #####:  444:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  445:{	
        -:  446:  int card;
    #####:  447:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  448:
        -:  449:  //check if it is the right phase
    #####:  450:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  451:    {
    #####:  452:      return -1;
        -:  453:    }
        -:  454:	
        -:  455:  //check if player has enough actions
    #####:  456:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  457:    {
    #####:  458:      return -1;
        -:  459:    }
        -:  460:	
        -:  461:  //get card played
    #####:  462:  card = handCard(handPos, state);
call    0 never executed
        -:  463:	
        -:  464:  //check if selected card is an action
    #####:  465:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  466:    {
    #####:  467:      return -1;
        -:  468:    }
        -:  469:	
        -:  470:  //play card
    #####:  471:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  472:    {
    #####:  473:      return -1;
        -:  474:    }
        -:  475:	
        -:  476:  //reduce number of actions
    #####:  477:  state->numActions--;
        -:  478:
        -:  479:  //update coins (Treasure cards may be added with card draws)
    #####:  480:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  481:	
    #####:  482:  return 0;
        -:  483:}
        -:  484:
function buyCard called 27 returned 100% blocks executed 93%
       27:  485:int buyCard(int supplyPos, struct gameState *state) {
        -:  486:  int who;
        -:  487:  if (DEBUG){
        -:  488:    printf("Entering buyCard...\n");
        -:  489:  }
        -:  490:
        -:  491:  // I don't know what to do about the phase thing.
        -:  492:
       27:  493:  who = state->whoseTurn;
        -:  494:
       27:  495:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  496:    if (DEBUG)
        -:  497:      printf("You do not have any buys left\n");
    #####:  498:    return -1;
       27:  499:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 37% (fallthrough)
branch  2 taken 63%
        -:  500:    if (DEBUG)
        -:  501:      printf("There are not any of that type of card left\n");
       10:  502:    return -1;
       17:  503:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 65% (fallthrough)
branch  2 taken 35%
        -:  504:    if (DEBUG) 
        -:  505:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       11:  506:    return -1;
        -:  507:  } else {
        6:  508:    state->phase=1;
        -:  509:    //state->supplyCount[supplyPos]--;
        6:  510:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  511:  
        6:  512:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        6:  513:    state->numBuys--;
        -:  514:    if (DEBUG)
        -:  515:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  516:  }
        -:  517:
        -:  518:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  519:  //state->discardCount[who]++;
        -:  520:    
        6:  521:  return 0;
        -:  522:}
        -:  523:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  524:int numHandCards(struct gameState *state) {
    #####:  525:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  526:}
        -:  527:
function handCard called 0 returned 0% blocks executed 0%
    #####:  528:int handCard(int handPos, struct gameState *state) {
    #####:  529:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  530:  return state->hand[currentPlayer][handPos];
        -:  531:}
        -:  532:
function supplyCount called 39 returned 100% blocks executed 100%
       39:  533:int supplyCount(int card, struct gameState *state) {
       39:  534:  return state->supplyCount[card];
        -:  535:}
        -:  536:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  537:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  538:  int i;
    #####:  539:  int count = 0;
        -:  540:
    #####:  541:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  542:    {
    #####:  543:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  544:    }
        -:  545:
    #####:  546:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  547:    {
    #####:  548:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  549:    }
        -:  550:
    #####:  551:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  552:    {
    #####:  553:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  554:    }
        -:  555:
    #####:  556:  return count;
        -:  557:}
        -:  558:
function whoseTurn called 17 returned 100% blocks executed 100%
       17:  559:int whoseTurn(struct gameState *state) {
       17:  560:  return state->whoseTurn;
        -:  561:}
        -:  562:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  563:int endTurn(struct gameState *state) {
        -:  564:  int k;
        -:  565:  int i;
    #####:  566:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  567:  
        -:  568:  //Discard hand
    #####:  569:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  570:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  571:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  572:  }
    #####:  573:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  574:    
        -:  575:  //Code for determining the player
    #####:  576:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  577:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  578:  }
        -:  579:  else{
    #####:  580:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  581:  }
        -:  582:
    #####:  583:  state->outpostPlayed = 0;
    #####:  584:  state->phase = 0;
    #####:  585:  state->numActions = 1;
    #####:  586:  state->coins = 0;
    #####:  587:  state->numBuys = 1;
    #####:  588:  state->playedCardCount = 0;
    #####:  589:  state->handCount[state->whoseTurn] = 0;
        -:  590:
        -:  591:  //int k; move to top
        -:  592:  //Next player draws hand
    #####:  593:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  594:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  595:  }
        -:  596:
        -:  597:  //Update money
    #####:  598:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  599:
    #####:  600:  return 0;
        -:  601:}
        -:  602:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  603:int isGameOver(struct gameState *state) {
        -:  604:  int i;
        -:  605:  int j;
        -:  606:	
        -:  607:  //if stack of Province cards is empty, the game ends
    #####:  608:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  609:    {
    #####:  610:      return 1;
        -:  611:    }
        -:  612:
        -:  613:  //if three supply pile are at 0, the game ends
    #####:  614:  j = 0;
    #####:  615:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  616:    {
    #####:  617:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  618:	{
    #####:  619:	  j++;
        -:  620:	}
        -:  621:    }
    #####:  622:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  623:    {
    #####:  624:      return 1;
        -:  625:    }
        -:  626:
    #####:  627:  return 0;
        -:  628:}
        -:  629:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  630:int scoreFor (int player, struct gameState *state) {
        -:  631:
        -:  632:  int i;
    #####:  633:  int score = 0;
        -:  634:  //score from hand
    #####:  635:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  636:    {
    #####:  637:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  638:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  639:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  640:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  641:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  642:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  643:    }
        -:  644:
        -:  645:  //score from discard
    #####:  646:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  647:    {
    #####:  648:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  649:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  650:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  651:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  652:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  653:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  654:    }
        -:  655:
        -:  656:  //score from deck
    #####:  657:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  658:    {
    #####:  659:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  660:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  661:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  662:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  663:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  664:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  665:    }
        -:  666:
    #####:  667:  return score;
        -:  668:}
        -:  669:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  670:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  671:  int i;	
        -:  672:  int j;
        -:  673:  int highScore;
        -:  674:  int currentPlayer;
        -:  675:
        -:  676:  //get score for each player
    #####:  677:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  678:    {
        -:  679:      //set unused player scores to -9999
    #####:  680:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  681:	{
    #####:  682:	  players[i] = -9999;
        -:  683:	}
        -:  684:      else
        -:  685:	{
    #####:  686:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  687:	}
        -:  688:    }
        -:  689:
        -:  690:  //find highest score
    #####:  691:  j = 0;
    #####:  692:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  693:    {
    #####:  694:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  695:	{
    #####:  696:	  j = i;
        -:  697:	}
        -:  698:    }
    #####:  699:  highScore = players[j];
        -:  700:
        -:  701:  //add 1 to players who had less turns
    #####:  702:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  703:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  704:    {
    #####:  705:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  706:	{
    #####:  707:	  players[i]++;
        -:  708:	}
        -:  709:    }
        -:  710:
        -:  711:  //find new highest score
    #####:  712:  j = 0;
    #####:  713:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  714:    {
    #####:  715:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  716:	{
    #####:  717:	  j = i;
        -:  718:	}
        -:  719:    }
    #####:  720:  highScore = players[j];
        -:  721:
        -:  722:  //set winners in array to 1 and rest to 0
    #####:  723:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  724:    {
    #####:  725:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  726:	{
    #####:  727:	  players[i] = 1;
        -:  728:	}
        -:  729:      else
        -:  730:	{
    #####:  731:	  players[i] = 0;
        -:  732:	}
        -:  733:    }
        -:  734:
    #####:  735:  return 0;
        -:  736:}
        -:  737:
function drawCard called 86 returned 100% blocks executed 86%
       86:  738:int drawCard(int player, struct gameState *state)
        -:  739:{	
        -:  740:  
        -:  741:  if (DEBUG)
        -:  742:  {
        -:  743:    printf("Entered drawCard\n");
        -:  744:  }
        -:  745:  
        -:  746:  int count;
        -:  747:  int deckCounter;
        -:  748:  //If deck is empty...
       86:  749:  if (state->deckCount[player] <= 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  750:  {
        -:  751:    
        -:  752:    //Step 1:
        -:  753:    //Shuffle the discard pile back into a deck
        -:  754:    int i;
        -:  755:    //Move discard to deck
        6:  756:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  757:    {
    #####:  758:      state->deck[player][i] = state->discard[player][i];
    #####:  759:      state->discard[player][i] = -1;
        -:  760:    }
        -:  761:
        6:  762:    state->deckCount[player] = state->discardCount[player];
        -:  763:    //Reset discard
        6:  764:    state->discardCount[player] = 0;
        -:  765:
        -:  766:    //Shufffle the deck
        6:  767:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  768:   
        -:  769:    if (DEBUG){//Debug statements
        -:  770:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  771:    }
        -:  772:    
        6:  773:    state->discardCount[player] = 0;
        -:  774:
        -:  775:    //Step 2 Draw Card
        6:  776:    count = state->handCount[player];//Get current player's hand count
        -:  777:    
        -:  778:    if (DEBUG){//Debug statements
        -:  779:      printf("Current hand count: %d\n", count);
        -:  780:    }
        6:  781:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  782:
        6:  783:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  784:      return -1;
        -:  785:
    #####:  786:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  787:    state->deckCount[player]--;
    #####:  788:    state->handCount[player]++;//Increment hand count
        -:  789:  }
        -:  790:
        -:  791:  else
        -:  792:  {
       80:  793:    int count = state->handCount[player];//Get current hand count for player
        -:  794:    int deckCounter;
        -:  795:    if (DEBUG){//Debug statements
        -:  796:      printf("Current hand count: %d\n", count);
        -:  797:    }
        -:  798:
       80:  799:    deckCounter = state->deckCount[player];//Create holder for the deck count
       80:  800:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       80:  801:    state->deckCount[player]--;
       80:  802:    state->handCount[player]++;//Increment hand count
        -:  803:  }
        -:  804:
       80:  805:  return 0;
        -:  806:}
        -:  807:
function getCost called 50 returned 100% blocks executed 97%
       50:  808:int getCost(int cardNumber)
        -:  809:{
       50:  810:  switch( cardNumber ) 
branch  0 taken 6%
branch  1 taken 6%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 6%
branch  5 taken 6%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 6%
branch 15 taken 4%
branch 16 taken 6%
branch 17 taken 2%
branch 18 taken 2%
branch 19 taken 2%
branch 20 taken 2%
branch 21 taken 2%
branch 22 taken 2%
branch 23 taken 2%
branch 24 taken 2%
branch 25 taken 2%
branch 26 taken 2%
branch 27 taken 0%
        -:  811:    {
        -:  812:    case curse:
        3:  813:      return 0;
        -:  814:    case estate:
        3:  815:      return 2;
        -:  816:    case duchy:
        2:  817:      return 5;
        -:  818:    case province:
        2:  819:      return 8;
        -:  820:    case copper:
        3:  821:      return 0;
        -:  822:    case silver:
        3:  823:      return 3;
        -:  824:    case gold:
        2:  825:      return 6;
        -:  826:    case adventurer:
        2:  827:      return 6;
        -:  828:    case council_room:
        2:  829:      return 5;
        -:  830:    case feast:
        2:  831:      return 4;
        -:  832:    case gardens:
        2:  833:      return 4;
        -:  834:    case mine:
        2:  835:      return 5;
        -:  836:    case remodel:
        2:  837:      return 4;
        -:  838:    case smithy:
        2:  839:      return 4;
        -:  840:    case village:
        3:  841:      return 3;
        -:  842:    case baron:
        2:  843:      return 4;
        -:  844:    case great_hall:
        3:  845:      return 3;
        -:  846:    case minion:
        1:  847:      return 5;
        -:  848:    case steward:
        1:  849:      return 3;
        -:  850:    case tribute:
        1:  851:      return 5;
        -:  852:    case ambassador:
        1:  853:      return 3;
        -:  854:    case cutpurse:
        1:  855:      return 4;
        -:  856:    case embargo: 
        1:  857:      return 2;
        -:  858:    case outpost:
        1:  859:      return 5;
        -:  860:    case salvager:
        1:  861:      return 4;
        -:  862:    case sea_hag:
        1:  863:      return 4;
        -:  864:    case treasure_map:
        1:  865:      return 4;
        -:  866:    }
        -:  867:	
    #####:  868:  return -1;
        -:  869:}
        -:  870:
function cardEffect called 12 returned 100% blocks executed 7%
       12:  871:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  872:{
        -:  873:  int i;
        -:  874:  int j;
        -:  875:  int k;
        -:  876:  int x;
        -:  877:  int index;
       12:  878:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  879:  int nextPlayer = currentPlayer + 1;
        -:  880:
       12:  881:  int tributeRevealedCards[2] = {-1, -1};
        -:  882:  int temphand[MAX_HAND];// moved above the if statement
       12:  883:  int drawntreasure=0;
       12:  884:  int cardDrawn=0;
       12:  885:  int z = 0;// this is the counter for the temp hand
       12:  886:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  887:    nextPlayer = 0;
        -:  888:  }
        -:  889:  
        -:  890:	
        -:  891:  //uses switch to select card and perform actions
       12:  892:  switch( card ) 
branch  0 taken 17%
branch  1 taken 8%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 25%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  893:    {
        -:  894:    int return_adventurer=0;
        -:  895:    case adventurer:
        2:  896:      return_adventurer=adventurer_case(currentPlayer, state, cardDrawn, drawntreasure, temphand, z);
call    0 returned 100%
        2:  897:      return return_adventurer;
        -:  898:     int return_council=0;
        -:  899:     case council_room:
        1:  900:      return_council=council_case(currentPlayer, state, handPos);
call    0 returned 100%
        1:  901:      return return_council;
        -:  902:
        -:  903:    int return_feast=0;
        -:  904:    case feast:
    #####:  905:      return_feast=feast_case(currentPlayer, state, temphand, choice1);
call    0 never executed
    #####:  906:      return return_feast;
        -:  907:     			
        -:  908:    case gardens:
    #####:  909:      return -1;
        -:  910:			
        -:  911:    case mine:
    #####:  912:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  913:
    #####:  914:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  915:	{
    #####:  916:	  return -1;
        -:  917:	}
        -:  918:		
    #####:  919:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  920:	{
    #####:  921:	  return -1;
        -:  922:	}
        -:  923:
    #####:  924:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  930:
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:
        -:  934:      //discard trashed card
    #####:  935:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  936:	{
    #####:  937:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  940:	      break;
        -:  941:	    }
        -:  942:	}
        -:  943:			
    #####:  944:      return 0;
        -:  945:			
        -:  946:    case remodel:
    #####:  947:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  948:
    #####:  949:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  950:	{
    #####:  951:	  return -1;
        -:  952:	}
        -:  953:
    #####:  954:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  955:
        -:  956:      //discard card from hand
    #####:  957:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  958:
        -:  959:      //discard trashed card
    #####:  960:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  961:	{
    #####:  962:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  963:	    {
    #####:  964:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  965:	      break;
        -:  966:	    }
        -:  967:	}
        -:  968:
        -:  969:
    #####:  970:      return 0;
        -:  971:		int smithy_return=0;
        -:  972:    case smithy:
        6:  973:      smithy_return=smithy_case(currentPlayer, state, handPos);
call    0 returned 100%
        6:  974:      return smithy_return;
        -:  975:      //+3 Cards
        -:  976:    		
        -:  977:    case village:
        -:  978:      //+1 Card
    #####:  979:      drawCard(currentPlayer, state);
call    0 never executed
        -:  980:			
        -:  981:      //+2 Actions
    #####:  982:      state->numActions = state->numActions + 2;
        -:  983:			
        -:  984:      //discard played card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  986:      return 0;
        -:  987:		
        -:  988:    int return_baron=0;
        -:  989:    case baron:
        3:  990:      return_baron=baron_case(currentPlayer, state, choice1);//, i);
call    0 returned 100%
        3:  991:      return return_baron;
        -:  992:     
        -:  993:		
        -:  994:    case great_hall:
        -:  995:      //+1 Card
    #####:  996:      drawCard(currentPlayer, state);
call    0 never executed
        -:  997:			
        -:  998:      //+1 Actions
    #####:  999:      state->numActions++;
        -: 1000:			
        -: 1001:      //discard card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case minion:
        -: 1006:      //+1 action
    #####: 1007:      state->numActions++;
        -: 1008:			
        -: 1009:      //discard card from hand
    #####: 1010:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1011:			
    #####: 1012:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  state->coins = state->coins + 2;
        -: 1015:	}
        -: 1016:			
    #####: 1017:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1018:	{
        -: 1019:	  //discard hand
    #####: 1020:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1021:	    {
    #####: 1022:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1023:	    }
        -: 1024:				
        -: 1025:	  //draw 4
    #####: 1026:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1027:	    {
    #####: 1028:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1029:	    }
        -: 1030:				
        -: 1031:	  //other players discard hand and redraw if hand size > 4
    #####: 1032:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1033:	    {
    #####: 1034:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1035:		{
    #####: 1036:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1037:		    {
        -: 1038:		      //discard hand
    #####: 1039:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1040:			{
    #####: 1041:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1042:			}
        -: 1043:							
        -: 1044:		      //draw 4
    #####: 1045:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1046:			{
    #####: 1047:			  drawCard(i, state);
call    0 never executed
        -: 1048:			}
        -: 1049:		    }
        -: 1050:		}
        -: 1051:	    }
        -: 1052:				
        -: 1053:	}
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case steward:
    #####: 1057:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1058:	{
        -: 1059:	  //+2 cards
    #####: 1060:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1061:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1062:	}
    #####: 1063:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
        -: 1065:	  //+2 coins
    #####: 1066:	  state->coins = state->coins + 2;
        -: 1067:	}
        -: 1068:      else
        -: 1069:	{
        -: 1070:	  //trash 2 cards in hand
    #####: 1071:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1072:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1073:	}
        -: 1074:			
        -: 1075:      //discard card from hand
    #####: 1076:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case tribute:
    #####: 1080:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1081:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1082:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1083:	  state->deckCount[nextPlayer]--;
        -: 1084:	}
    #####: 1085:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1086:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1087:	  state->discardCount[nextPlayer]--;
        -: 1088:	}
        -: 1089:	else{
        -: 1090:	  //No Card to Reveal
        -: 1091:	  if (DEBUG){
        -: 1092:	    printf("No cards to reveal\n");
        -: 1093:	  }
        -: 1094:	}
        -: 1095:      }
        -: 1096:	    
        -: 1097:      else{
    #####: 1098:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1099:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1100:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1101:	    state->deckCount[nextPlayer]++;
    #####: 1102:	    state->discard[nextPlayer][i] = -1;
    #####: 1103:	    state->discardCount[nextPlayer]--;
        -: 1104:	  }
        -: 1105:			    
    #####: 1106:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1107:	} 
    #####: 1108:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1109:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1110:	state->deckCount[nextPlayer]--;
    #####: 1111:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1112:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1113:	state->deckCount[nextPlayer]--;
        -: 1114:      }    
        -: 1115:		       
    #####: 1116:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1117:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1118:	state->playedCardCount++;
    #####: 1119:	tributeRevealedCards[1] = -1;
        -: 1120:      }
        -: 1121:
    #####: 1122:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1123:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1124:	  state->coins += 2;
        -: 1125:	}
        -: 1126:		    
    #####: 1127:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1128:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1129:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1130:	}
        -: 1131:	else{//Action Card
    #####: 1132:	  state->numActions = state->numActions + 2;
        -: 1133:	}
        -: 1134:      }
        -: 1135:	    
    #####: 1136:      return 0;
        -: 1137:		
        -: 1138:    case ambassador:
    #####: 1139:      j = 0;		//used to check if player has enough cards to discard
        -: 1140:
    #####: 1141:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1142:	{
    #####: 1143:	  return -1;				
        -: 1144:	}
        -: 1145:
    #####: 1146:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  return -1;
        -: 1149:	}
        -: 1150:
    #####: 1151:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1152:	{
    #####: 1153:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1154:	    {
    #####: 1155:	      j++;
        -: 1156:	    }
        -: 1157:	}
    #####: 1158:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1159:	{
    #####: 1160:	  return -1;				
        -: 1161:	}
        -: 1162:
        -: 1163:      if (DEBUG) 
        -: 1164:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1165:
        -: 1166:      //increase supply count for choosen card by amount being discarded
    #####: 1167:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1168:			
        -: 1169:      //each other player gains a copy of revealed card
    #####: 1170:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1171:	{
    #####: 1172:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1173:	    {
    #####: 1174:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1175:	    }
        -: 1176:	}
        -: 1177:
        -: 1178:      //discard played card from hand
    #####: 1179:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1180:
        -: 1181:      //trash copies of cards returned to supply
    #####: 1182:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1183:	{
    #####: 1184:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1185:	    {
    #####: 1186:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1187:		{
    #####: 1188:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1189:		  break;
        -: 1190:		}
        -: 1191:	    }
        -: 1192:	}			
        -: 1193:
    #####: 1194:      return 0;
        -: 1195:		
        -: 1196:    case cutpurse:
        -: 1197:
    #####: 1198:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1199:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1202:	    {
    #####: 1203:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1204:		{
    #####: 1205:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1206:		    {
    #####: 1207:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1208:		      break;
        -: 1209:		    }
    #####: 1210:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1211:		    {
    #####: 1212:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1213:			{
        -: 1214:			  if (DEBUG)
        -: 1215:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1216:			}	
    #####: 1217:		      break;
        -: 1218:		    }		
        -: 1219:		}
        -: 1220:					
        -: 1221:	    }
        -: 1222:				
        -: 1223:	}				
        -: 1224:
        -: 1225:      //discard played card from hand
    #####: 1226:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1227:
    #####: 1228:      return 0;
        -: 1229:
        -: 1230:		
        -: 1231:    case embargo: 
        -: 1232:      //+2 Coins
    #####: 1233:      state->coins = state->coins + 2;
        -: 1234:			
        -: 1235:      //see if selected pile is in play
    #####: 1236:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1237:	{
    #####: 1238:	  return -1;
        -: 1239:	}
        -: 1240:			
        -: 1241:      //add embargo token to selected supply pile
    #####: 1242:      state->embargoTokens[choice1]++;
        -: 1243:			
        -: 1244:      //trash card
    #####: 1245:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1246:      return 0;
        -: 1247:		
        -: 1248:    case outpost:
        -: 1249:      //set outpost flag
    #####: 1250:      state->outpostPlayed++;
        -: 1251:			
        -: 1252:      //discard card
    #####: 1253:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1254:      return 0;
        -: 1255:		
        -: 1256:    case salvager:
        -: 1257:      //+1 buy
    #####: 1258:      state->numBuys++;
        -: 1259:			
    #####: 1260:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1261:	{
        -: 1262:	  //gain coins equal to trashed card
    #####: 1263:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1264:	  //trash card
    #####: 1265:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1266:	}
        -: 1267:			
        -: 1268:      //discard card
    #####: 1269:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1270:      return 0;
        -: 1271:		
        -: 1272:    case sea_hag:
    #####: 1273:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1274:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1275:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1276:	  state->discardCount[i]++;
    #####: 1277:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1278:	}
        -: 1279:      }
    #####: 1280:      return 0;
        -: 1281:		
        -: 1282:    case treasure_map:
        -: 1283:      //search hand for another treasure_map
    #####: 1284:      index = -1;
    #####: 1285:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1286:	{
    #####: 1287:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1288:	    {
    #####: 1289:	      index = i;
    #####: 1290:	      break;
        -: 1291:	    }
        -: 1292:	}
    #####: 1293:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1294:	{
        -: 1295:	  //trash both treasure cards
    #####: 1296:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1297:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1298:
        -: 1299:	  //gain 4 Gold cards
    #####: 1300:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1301:	    {
    #####: 1302:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1303:	    }
        -: 1304:				
        -: 1305:	  //return success
    #####: 1306:	  return 1;
        -: 1307:	}
        -: 1308:			
        -: 1309:      //no second treasure_map found in hand
    #####: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
    #####: 1313:  return -1;
        -: 1314:}
        -: 1315:
function discardCard called 7 returned 100% blocks executed 80%
        7: 1316:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1317:{
        -: 1318:	
        -: 1319:  //if card is not trashed, added to Played pile 
        7: 1320:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1321:    {
        -: 1322:      //add card to played pile
        -: 1323:      if (DEBUG)
        -: 1324:      {
        -: 1325:        printf("DEBUGS: state->playedCards[state->playedCardCount]: %i\n", state->playedCards[state->playedCardCount]);
        -: 1326:        printf("DEBUGS: state->hand[currentPlayer][handPos]: %i\n", state->hand[currentPlayer][handPos]);
        -: 1327:      }
        7: 1328:      printf("\n\ndiscarding %i for player %i at handpost %i\n\n", state->hand[currentPlayer][handPos], currentPlayer+1, handPos);
call    0 returned 100%
        7: 1329:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        7: 1330:      state->playedCardCount++;
        -: 1331:    }
        -: 1332:	
        -: 1333:  //set played card to -1
        7: 1334:  state->hand[currentPlayer][handPos] = -1;
        -: 1335:	
        -: 1336:  //remove card from player's hand
        7: 1337:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1338:    {
        -: 1339:      //reduce number of cards in hand
    #####: 1340:      state->handCount[currentPlayer]--;
        -: 1341:    }
        7: 1342:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1343:    {
        -: 1344:      //reduce number of cards in hand
    #####: 1345:      state->handCount[currentPlayer]--;
        -: 1346:    }
        -: 1347:  else 	
        -: 1348:    {
        -: 1349:      //replace discarded card with last card in hand
        7: 1350:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1351:      //set last card to -1
        7: 1352:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1353:      //reduce number of cards in hand
        7: 1354:      state->handCount[currentPlayer]--;
        -: 1355:    }
        -: 1356:	
        7: 1357:  return 0;
        -: 1358:}
        -: 1359:
function gainCard called 8 returned 100% blocks executed 70%
        8: 1360:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1361:{
        -: 1362:  //Note: supplyPos is enum of choosen card
        -: 1363:	
        -: 1364:  //check if supply pile is empty (0) or card is not used in game (-1)
        8: 1365:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1366:    {
    #####: 1367:      return -1;
        -: 1368:    }
        -: 1369:	
        -: 1370:  //added card for [whoseTurn] current player:
        -: 1371:  // toFlag = 0 : add to discard
        -: 1372:  // toFlag = 1 : add to deck
        -: 1373:  // toFlag = 2 : add to hand
        -: 1374:
        8: 1375:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1376:    {
    #####: 1377:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1378:      state->deckCount[player]++;
        -: 1379:    }
        8: 1380:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1381:    {
    #####: 1382:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1383:      state->handCount[player]++;
        -: 1384:    }
        -: 1385:  else
        -: 1386:    {
        8: 1387:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        8: 1388:      state->discardCount[player]++;
        -: 1389:    }
        -: 1390:	
        -: 1391:  //decrease number in supply pile
        8: 1392:  state->supplyCount[supplyPos]--;
        -: 1393:	 
        8: 1394:  return 0;
        -: 1395:}
        -: 1396:
function updateCoins called 9 returned 100% blocks executed 82%
        9: 1397:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1398:{
        -: 1399:  int i;
        -: 1400:	
        -: 1401:  //reset coin count
        9: 1402:  state->coins = 0;
        -: 1403:
        -: 1404:  //add coins for each Treasure card in player's hand
       54: 1405:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1406:    {
       45: 1407:      if (state->hand[player][i] == copper)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1408:	{
       33: 1409:	  state->coins += 1;
        -: 1410:	}
       12: 1411:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1412:	{
    #####: 1413:	  state->coins += 2;
        -: 1414:	}
       12: 1415:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1416:	{
    #####: 1417:	  state->coins += 3;
        -: 1418:	}	
        -: 1419:    }	
        -: 1420:
        -: 1421:  //add bonus
        9: 1422:  state->coins += bonus;
        -: 1423:
        9: 1424:  return 0;
        -: 1425:}
        -: 1426:
        -: 1427:
        -: 1428://end of dominion.c
        -: 1429:
        -: 1430:
-------UNIT TEST 1------
---Testing 'shuffle'---
PRE-CONDITIONS: FOR TEST CASE 1:
1.`shuffle()` is receiving an empty discard pile for player 0:
 testShuffle->discardCount[0]:0
shuffle returned 0, indicating success; checkign deck
FAILURE: card for player 0 at 0 the same as before: 1 and 1
FAILURE: card for player 0 at 1 the same as before: 1 and 1
FAILURE: card for player 0 at 2 the same as before: 4 and 4
FAILURE: card for player 0 at 3 the same as before: 4 and 4
FAILURE: card for player 0 at 4 the same as before: 4 and 4
OVERALL: Failure, not even one item changed in deck


PRE-CONDITIONS: FOR TEST CASE 2: Empty player deck for player 0.
Shuffle checks the state of the players deck; if it is less than  1, it should return -1
SUCCESS: noted that the deckCount for player 0 is less than one
-------FINISHED UNIT TEST 1------
+++++STARTING unit test 2: Testing kingdomCards() function+++++

---GOOD INPUT: TEST ONE: adding adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall to kingdom cards----
Checking that each kingdom card corresponds to the intended card
SUCCESS: Card #0 with enum 7 successfully set to kingdom cards array
SUCCESS: Card #1 with enum 10 successfully set to kingdom cards array
SUCCESS: Card #2 with enum 22 successfully set to kingdom cards array
SUCCESS: Card #3 with enum 14 successfully set to kingdom cards array
SUCCESS: Card #4 with enum 17 successfully set to kingdom cards array
SUCCESS: Card #5 with enum 11 successfully set to kingdom cards array
SUCCESS: Card #6 with enum 21 successfully set to kingdom cards array
SUCCESS: Card #7 with enum 25 successfully set to kingdom cards array
SUCCESS: Card #8 with enum 19 successfully set to kingdom cards array
SUCCESS: Card #9 with enum 13 successfully set to kingdom cards array
---BAD INPUT: TEST ONE: adding adventurer, copper, feast, gardens, mine, remodel, smithy, village, baron, great_hall to kingdom cards----
Checking that each kingdom card corresponds to the intended card
SUCCESS: Card #0 with enum 7 successfully set to kingdom cards array
SUCCESS: Card #1 with enum 4 successfully set to kingdom cards array
FAILURE: Function allowed a non-kingdom card to be added
SUCCESS: Card #2 with enum 22 successfully set to kingdom cards array
SUCCESS: Card #3 with enum 14 successfully set to kingdom cards array
SUCCESS: Card #4 with enum 17 successfully set to kingdom cards array
SUCCESS: Card #5 with enum 11 successfully set to kingdom cards array
SUCCESS: Card #6 with enum 21 successfully set to kingdom cards array
SUCCESS: Card #7 with enum 25 successfully set to kingdom cards array
SUCCESS: Card #8 with enum 19 successfully set to kingdom cards array
SUCCESS: Card #9 with enum 13 successfully set to kingdom cards array


+++++FINISHED unit test 2: Testing kingdomCards() function+++++

$$$$$---UNIT TEST 3---$$$$$

-------Testing 'initializeGame' function with parameters 'int numPlayers', 'int kingdomGard', 'int randomSeed', and 'int gameState *state', and a return value of an integer signifying failure for -1 or 0 for success------


----TEST CASE 1: GOOD INPUT 2 players-----
Checking that the number of players for the state has been appropriately set
SUCCESS: 2 matches 2
SUCCESS: correct number of copper cards set: 46
SUCCESS: correct number of silver cards set: 40
SUCCESS: correct number of gold cards set: 30
SUCCESS: correct number of curse cards set: 10
SUCCESS: correct number of estate cards set: 8
SUCCESS: correct number of duchy cards set: 8
SUCCESS: correct number of province cards set: 8
SUCCESS: supplycount at 7 is 10
FAILURE: supplycount at 8 is 10
SUCCESS: supplycount at 8 is 10
FAILURE: supplycount at 9 is 10
FAILURE: supplycount at 9 is 10
SUCCESS: supplycount at 9 is 10
FAILURE: supplycount at 10 is 8
FAILURE: supplycount at 10 is 8
FAILURE: supplycount at 10 is 8
SUCCESS: supplycount at 10 is 8
FAILURE: supplycount at 11 is 10
FAILURE: supplycount at 11 is 10
FAILURE: supplycount at 11 is 10
FAILURE: supplycount at 11 is 10
SUCCESS: supplycount at 11 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
SUCCESS: supplycount at 12 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
SUCCESS: supplycount at 13 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
SUCCESS: supplycount at 14 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
SUCCESS: supplycount at 15 is 10
FAILURE: supplycount at 16 is 8
FAILURE: supplycount at 16 is 8
FAILURE: supplycount at 16 is 8
FAILURE: supplycount at 16 is 8
FAILURE: supplycount at 16 is 8
FAILURE: supplycount at 16 is 8
FAILURE: supplycount at 16 is 8
FAILURE: supplycount at 16 is 8
FAILURE: supplycount at 16 is 8
SUCCESS: supplycount at 16 is 8
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
----FINISHED TEST CASE 1----


----TEST CASE 1A: GOOD INPUT 3 players-----
Checking that the number of players for the state has been appropriately set
SUCCESS: 3 matches 3
SUCCESS: correct number of copper cards set: 39
SUCCESS: correct number of silver cards set: 40
SUCCESS: correct number of gold cards set: 30
SUCCESS: correct number of curse cards set: 20
SUCCESS: correct number of estate cards set: 12
SUCCESS: correct number of duchy cards set: 12
SUCCESS: correct number of province cards set: 12
SUCCESS: supplycount at 7 is 10
FAILURE: supplycount at 8 is 10
SUCCESS: supplycount at 8 is 10
FAILURE: supplycount at 9 is 10
FAILURE: supplycount at 9 is 10
SUCCESS: supplycount at 9 is 10
FAILURE: supplycount at 10 is 12
FAILURE: supplycount at 10 is 12
FAILURE: supplycount at 10 is 12
SUCCESS: supplycount at 10 is 12
FAILURE: supplycount at 11 is 10
FAILURE: supplycount at 11 is 10
FAILURE: supplycount at 11 is 10
FAILURE: supplycount at 11 is 10
SUCCESS: supplycount at 11 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
SUCCESS: supplycount at 12 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
SUCCESS: supplycount at 13 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
SUCCESS: supplycount at 14 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
SUCCESS: supplycount at 15 is 10
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
SUCCESS: supplycount at 16 is 12
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
----FINISHED TEST CASE 1A----


----TEST CASE 1B: GOOD INPUT 4 players-----
Checking that the number of players for the state has been appropriately set
SUCCESS: 4 matches 4
SUCCESS: correct number of copper cards set: 32
SUCCESS: correct number of silver cards set: 40
SUCCESS: correct number of gold cards set: 30
SUCCESS: correct number of curse cards set: 30
SUCCESS: correct number of estate cards set: 12
SUCCESS: correct number of duchy cards set: 12
SUCCESS: correct number of province cards set: 12
SUCCESS: supplycount at 7 is 10
FAILURE: supplycount at 8 is 10
SUCCESS: supplycount at 8 is 10
FAILURE: supplycount at 9 is 10
FAILURE: supplycount at 9 is 10
SUCCESS: supplycount at 9 is 10
FAILURE: supplycount at 10 is 12
FAILURE: supplycount at 10 is 12
FAILURE: supplycount at 10 is 12
SUCCESS: supplycount at 10 is 12
FAILURE: supplycount at 11 is 10
FAILURE: supplycount at 11 is 10
FAILURE: supplycount at 11 is 10
FAILURE: supplycount at 11 is 10
SUCCESS: supplycount at 11 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
FAILURE: supplycount at 12 is 10
SUCCESS: supplycount at 12 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
FAILURE: supplycount at 13 is 10
SUCCESS: supplycount at 13 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
FAILURE: supplycount at 14 is 10
SUCCESS: supplycount at 14 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
FAILURE: supplycount at 15 is 10
SUCCESS: supplycount at 15 is 10
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
FAILURE: supplycount at 16 is 12
SUCCESS: supplycount at 16 is 12
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 17 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 18 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 19 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 20 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 21 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 22 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 23 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 24 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 25 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
SUCCESS: supplycount at 26 is -1
----FINISHED TEST CASE 1B----


----TEST CASE 2: BAD INPUT RE: NumPlayers-----
Attempting to initialize game with 5 players; should return -1
SUCCESS: registered that there are too many players
FAILURE: 0 does not match 5
FAILURE: incorrect number of copper cards set: 0
FAILURE: incorrect number of silver cards set: 0
FAILURE: incorrect number of gold cards set: 0
FAILURE: incorrect number of estate cards set: 0
FAILURE: incorrect number of duchy cards set: 0
FAILURE: incorrect number of province cards set: 0
----FINISHED TEST CASE 2----


----TEST CASE 3: BAD INPUT RE: duplicate cards-----
Attempting to initialize game with duplicate cards; should return -1
SUCCESS: registered that there are duplicate cards
SUCCESS: 2 matches 2
FAILURE: incorrect number of copper cards set: 0
FAILURE: incorrect number of silver cards set: 0
FAILURE: incorrect number of gold cards set: 0
FAILURE: incorrect number of curse cards set: 0
FAILURE: incorrect number of estate cards set: 0
FAILURE: incorrect number of duchy cards set: 0
FAILURE: incorrect number of province cards set: 0
----FINISHED TEST CASE 3----


----TEST CASE 4: BAD INPUT RE: non-kingdom cards-----
Attempting to initialize game with duplicate cards; should return -1
FAILURE: did not register that there is a non-kingdom card
SUCCESS: 2 matches 2
SUCCESS: correct number of copper cards set: 46
SUCCESS: correct number of silver cards set: 40
SUCCESS: correct number of gold cards set: 30
SUCCESS: correct number of curse cards set: 10
SUCCESS: correct number of estate cards set: 8
SUCCESS: correct number of duchy cards set: 8
SUCCESS: correct number of province cards set: 8
----FINISHED TEST CASE 4----


testing function `buyCard`, which takes parameters 'int supplyPos', and 'struct gameState *state'
-----START: TEST CASES 1 to 27------

You start the game with 3 coins
STATUS BEFORE: coins: 3, buys: 1, number of 0 card left: 10
TESTING BUYCARD with card 0
STATUS AFTER:  coins: 3, buys: 0, number of 0 card left: 9
0
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 1 card left: 8
TESTING BUYCARD with card 1
STATUS AFTER:  coins: 1, buys: 0, number of 1 card left: 7
0
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 2 card left: 8
TESTING BUYCARD with card 2
STATUS AFTER:  coins: 3, buys: 1, number of 2 card left: 8
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 3 card left: 8
TESTING BUYCARD with card 3
STATUS AFTER:  coins: 3, buys: 1, number of 3 card left: 8
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 4 card left: 46
TESTING BUYCARD with card 4
STATUS AFTER:  coins: 3, buys: 0, number of 4 card left: 45
0
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 5 card left: 40
TESTING BUYCARD with card 5
STATUS AFTER:  coins: 0, buys: 0, number of 5 card left: 39
0
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 6 card left: 30
TESTING BUYCARD with card 6
STATUS AFTER:  coins: 3, buys: 1, number of 6 card left: 30
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 7 card left: 10
TESTING BUYCARD with card 7
STATUS AFTER:  coins: 3, buys: 1, number of 7 card left: 10
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 8 card left: 10
TESTING BUYCARD with card 8
STATUS AFTER:  coins: 3, buys: 1, number of 8 card left: 10
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 9 card left: 10
TESTING BUYCARD with card 9
STATUS AFTER:  coins: 3, buys: 1, number of 9 card left: 10
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 10 card left: 8
TESTING BUYCARD with card 10
STATUS AFTER:  coins: 3, buys: 1, number of 10 card left: 8
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 11 card left: 10
TESTING BUYCARD with card 11
STATUS AFTER:  coins: 3, buys: 1, number of 11 card left: 10
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 12 card left: 10
TESTING BUYCARD with card 12
STATUS AFTER:  coins: 3, buys: 1, number of 12 card left: 10
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 13 card left: 10
TESTING BUYCARD with card 13
STATUS AFTER:  coins: 3, buys: 1, number of 13 card left: 10
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 14 card left: 10
TESTING BUYCARD with card 14
STATUS AFTER:  coins: 0, buys: 0, number of 14 card left: 9
0
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 15 card left: 10
TESTING BUYCARD with card 15
STATUS AFTER:  coins: 3, buys: 1, number of 15 card left: 10
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 16 card left: 8
TESTING BUYCARD with card 16
STATUS AFTER:  coins: 0, buys: 0, number of 16 card left: 7
0
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 17 card left: -1
TESTING BUYCARD with card 17
SUCCESS: registered that the number of cards was not enough to buy
STATUS AFTER:  coins: 3, buys: 1, number of 17 card left: -1
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 18 card left: -1
TESTING BUYCARD with card 18
SUCCESS: registered that the number of cards was not enough to buy
STATUS AFTER:  coins: 3, buys: 1, number of 18 card left: -1
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 19 card left: -1
TESTING BUYCARD with card 19
SUCCESS: registered that the number of cards was not enough to buy
STATUS AFTER:  coins: 3, buys: 1, number of 19 card left: -1
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 20 card left: -1
TESTING BUYCARD with card 20
SUCCESS: registered that the number of cards was not enough to buy
STATUS AFTER:  coins: 3, buys: 1, number of 20 card left: -1
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 21 card left: -1
TESTING BUYCARD with card 21
SUCCESS: registered that the number of cards was not enough to buy
STATUS AFTER:  coins: 3, buys: 1, number of 21 card left: -1
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 22 card left: -1
TESTING BUYCARD with card 22
SUCCESS: registered that the number of cards was not enough to buy
FAILURE: had enough money to buy cards but some issue occurred; or SUCCESS if other issue shown
STATUS AFTER:  coins: 3, buys: 1, number of 22 card left: -1
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 23 card left: -1
TESTING BUYCARD with card 23
SUCCESS: registered that the number of cards was not enough to buy
STATUS AFTER:  coins: 3, buys: 1, number of 23 card left: -1
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 24 card left: -1
TESTING BUYCARD with card 24
SUCCESS: registered that the number of cards was not enough to buy
STATUS AFTER:  coins: 3, buys: 1, number of 24 card left: -1
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 25 card left: -1
TESTING BUYCARD with card 25
SUCCESS: registered that the number of cards was not enough to buy
STATUS AFTER:  coins: 3, buys: 1, number of 25 card left: -1
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
STATUS BEFORE: coins: 3, buys: 1, number of 26 card left: -1
TESTING BUYCARD with card 26
SUCCESS: registered that the number of cards was not enough to buy
STATUS AFTER:  coins: 3, buys: 1, number of 26 card left: -1
-1
RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING
-----FINISHED: TEST CASE 1-27------

