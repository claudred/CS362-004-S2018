        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:int test_numPlayers(int actual, int plan);
        -:    9:int test_supplyCounts(int numPlayers, struct gameState *state);
        -:   10:void test_num_kingcard(int numplayer, struct gameState *gameState, int kingdomCards[10]);
function main called 1 returned 100% blocks executed 95%
        1:   11:int main(int argc, char *argv[]) 
        -:   12:{
        -:   13:	
        1:   14:	printf("$$$$$---UNIT TEST 3---$$$$$\n\n-------Testing 'initializeGame' function with parameters 'int numPlayers', 'int kingdomGard', 'int randomSeed', and 'int gameState *state', and a return value of an integer signifying failure for -1 or 0 for success------\n\n\n");
call    0 returned 100%
        -:   15:
        1:   16:	printf("----TEST CASE 1: GOOD INPUT 2 players-----\n");
call    0 returned 100%
        1:   17:	struct gameState *testGame1=newGame();
call    0 returned 100%
        1:   18:	int *kc1=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall);
call    0 returned 100%
        1:   19:	int test1_numPlayers=2;
        1:   20:	int returnval=initializeGame(test1_numPlayers, kc1, 1234, testGame1);	
call    0 returned 100%
        1:   21:	printf("Checking that the number of players for the state has been appropriately set\n");
call    0 returned 100%
        1:   22:	test_numPlayers(testGame1->numPlayers, test1_numPlayers);
call    0 returned 100%
        1:   23:	test_supplyCounts(testGame1->numPlayers, testGame1);
call    0 returned 100%
        1:   24:	test_num_kingcard(testGame1->numPlayers, testGame1, kc1);
call    0 returned 100%
        1:   25:		printf("----FINISHED TEST CASE 1----\n\n\n");
call    0 returned 100%
        -:   26:	
        1:   27:	printf("----TEST CASE 1A: GOOD INPUT 3 players-----\n");
call    0 returned 100%
        1:   28:	struct gameState *testGame1A=newGame();
call    0 returned 100%
        1:   29:	int *kc1A=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall);
call    0 returned 100%
        1:   30:	int test1A_numPlayers=3;
        1:   31:	returnval=initializeGame(test1A_numPlayers, kc1A, 1234, testGame1A);	
call    0 returned 100%
        1:   32:	printf("Checking that the number of players for the state has been appropriately set\n");
call    0 returned 100%
        1:   33:	test_numPlayers(testGame1A->numPlayers, test1A_numPlayers);
call    0 returned 100%
        1:   34:	test_supplyCounts(testGame1A->numPlayers, testGame1A);
call    0 returned 100%
        1:   35:	test_num_kingcard(testGame1A->numPlayers, testGame1A, kc1A);
call    0 returned 100%
        1:   36:	printf("----FINISHED TEST CASE 1A----\n\n\n");
call    0 returned 100%
        -:   37:	
        -:   38:	
        1:   39:	printf("----TEST CASE 1B: GOOD INPUT 4 players-----\n");
call    0 returned 100%
        1:   40:	struct gameState *testGame1B=newGame();
call    0 returned 100%
        1:   41:	int *kc1B=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall);
call    0 returned 100%
        1:   42:	int test1B_numPlayers=4;
        1:   43:	returnval=initializeGame(test1B_numPlayers, kc1B, 1234, testGame1B);	
call    0 returned 100%
        1:   44:	printf("Checking that the number of players for the state has been appropriately set\n");
call    0 returned 100%
        1:   45:	test_numPlayers(testGame1B->numPlayers, test1B_numPlayers);
call    0 returned 100%
        1:   46:	test_supplyCounts(testGame1B->numPlayers, testGame1B);
call    0 returned 100%
        1:   47:	test_num_kingcard(testGame1B->numPlayers, testGame1B, kc1B);
call    0 returned 100%
        1:   48:	printf("----FINISHED TEST CASE 1B----\n\n\n");
call    0 returned 100%
        -:   49:	
        -:   50:		
        1:   51:	printf("----TEST CASE 2: BAD INPUT RE: NumPlayers-----\n");
call    0 returned 100%
        1:   52:	printf("Attempting to initialize game with 5 players; should return -1\n");
call    0 returned 100%
        1:   53:	struct gameState *testGame2=newGame();
call    0 returned 100%
        1:   54:	int *kc2=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall);
call    0 returned 100%
        1:   55:	int test2_numPlayers=5;
        1:   56:	returnval=initializeGame(test2_numPlayers, kc2, 1234, testGame2);	
call    0 returned 100%
        1:   57:	if (returnval==-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   58:	{
        1:   59:		printf("SUCCESS: registered that there are too many players\n");
call    0 returned 100%
        -:   60:	}
        -:   61:	else 
        -:   62:	{
    #####:   63:		printf("FAILURE: did not register that there are too many players\n");
call    0 never executed
        -:   64:	}
        -:   65:	
        1:   66:	test_numPlayers(testGame2->numPlayers, test2_numPlayers);
call    0 returned 100%
        1:   67:	test_supplyCounts(testGame2->numPlayers, testGame2);
call    0 returned 100%
        -:   68:	
        1:   69:	printf("----FINISHED TEST CASE 2----\n\n\n");
call    0 returned 100%
        1:   70:	printf("----TEST CASE 3: BAD INPUT RE: duplicate cards-----\n");
call    0 returned 100%
        1:   71:	printf("Attempting to initialize game with duplicate cards; should return -1\n");
call    0 returned 100%
        1:   72:	struct gameState *testGame3=newGame();
call    0 returned 100%
        1:   73:	int *kc3=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, adventurer);
call    0 returned 100%
        1:   74:	int test3_numPlayers=2;
        1:   75:	returnval=initializeGame(test3_numPlayers, kc3, 1234, testGame3);	
call    0 returned 100%
        1:   76:	if (returnval==-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:	{
        1:   78:		printf("SUCCESS: registered that there are duplicate cards\n");
call    0 returned 100%
        -:   79:	}
        -:   80:	else 
        -:   81:	{
    #####:   82:		printf("FAILURE: did not register that there are duplicate cards\n");
call    0 never executed
        -:   83:	}
        1:   84:	test_numPlayers(testGame3->numPlayers, test3_numPlayers);
call    0 returned 100%
        1:   85:	test_supplyCounts(testGame3->numPlayers, testGame3);
call    0 returned 100%
        -:   86:	
        1:   87:	printf("----FINISHED TEST CASE 3----\n\n\n");
call    0 returned 100%
        -:   88:	
        1:   89:	printf("----TEST CASE 4: BAD INPUT RE: non-kingdom cards-----\n");
call    0 returned 100%
        1:   90:	printf("Attempting to initialize game with duplicate cards; should return -1\n");
call    0 returned 100%
        -:   91:	
        1:   92:	struct gameState *testGame4=newGame();
call    0 returned 100%
        1:   93:	int *kc4=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, copper);
call    0 returned 100%
        1:   94:	int test4_numPlayers=2;
        1:   95:	returnval=initializeGame(test4_numPlayers, kc4, 1234, testGame4);	
call    0 returned 100%
        1:   96:	if (returnval==-1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   97:	{
    #####:   98:		printf("SUCCESS: registered that there is a non-kingdom card\n");
call    0 never executed
        -:   99:	}
        -:  100:	else 
        -:  101:	{
        1:  102:		printf("FAILURE: did not register that there is a non-kingdom card\n");
call    0 returned 100%
        -:  103:	}
        1:  104:	test_numPlayers(testGame4->numPlayers, test4_numPlayers);
call    0 returned 100%
        1:  105:	test_supplyCounts(testGame4->numPlayers, testGame4);
call    0 returned 100%
        1:  106:	printf("----FINISHED TEST CASE 4----\n\n\n");
call    0 returned 100%
        -:  107:	
        1:  108:	return 0;
        -:  109:	
        -:  110:	
        -:  111:}
function test_numPlayers called 6 returned 100% blocks executed 100%
        6:  112:int test_numPlayers(int actual, int plan)
        -:  113:{
        6:  114:	if (actual==plan)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        -:  115:	{
        5:  116:		printf("SUCCESS: %i matches %i\n", actual, plan);
call    0 returned 100%
        5:  117:		return 0;
        -:  118:	}
        -:  119:	else 
        -:  120:	{
        1:  121:		printf("FAILURE: %i does not match %i\n", actual, plan);
call    0 returned 100%
        1:  122:		return -1;
        -:  123:	}
        -:  124:}
function test_supplyCounts called 6 returned 100% blocks executed 96%
        6:  125:int test_supplyCounts(int numPlayers, struct gameState *state)
        -:  126:{
        6:  127:	if ((state->supplyCount[copper])== 60 - (7 * numPlayers))
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  128:	{
        4:  129:		printf("SUCCESS: correct number of copper cards set: %i\n", state->supplyCount[copper]);
call    0 returned 100%
        -:  130:	}
        2:  131:	else if ((state->supplyCount[copper])!=60 - (7 * numPlayers))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  132:	{
        2:  133:		printf("FAILURE: incorrect number of copper cards set: %i\n", state->supplyCount[copper]);
call    0 returned 100%
        -:  134:
        -:  135:	}
        6:  136:	if (state->supplyCount[silver]==40)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  137:	{
        4:  138:		printf("SUCCESS: correct number of silver cards set: %i\n", state->supplyCount[silver]);
call    0 returned 100%
        -:  139:	}
        2:  140:	else if (state->supplyCount[silver]!=40)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  141:	{
        2:  142:		printf("FAILURE: incorrect number of silver cards set: %i\n", state->supplyCount[silver]);
call    0 returned 100%
        -:  143:	}
        6:  144:	if (state->supplyCount[gold]==30)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  145:	{
        4:  146:		printf("SUCCESS: correct number of gold cards set: %i\n", state->supplyCount[gold]);
call    0 returned 100%
        -:  147:	}
        2:  148:	else if (state->supplyCount[gold]!=30)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  149:	{
        2:  150:		printf("FAILURE: incorrect number of gold cards set: %i\n", state->supplyCount[gold]);
call    0 returned 100%
        -:  151:	}
        6:  152:	if (numPlayers==2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  153:	{
        3:  154:		if (state->supplyCount[curse]==10)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  155:		{
        2:  156:			printf("SUCCESS: correct number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 returned 100%
        -:  157:		}
        -:  158:		else 
        -:  159:		{
        1:  160:			printf("FAILURE: incorrect number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 returned 100%
        -:  161:		}
        3:  162:		if (state->supplyCount[estate]==8)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  163:		{
        2:  164:			printf("SUCCESS: correct number of estate cards set: %i\n", state->supplyCount[estate]);
call    0 returned 100%
        -:  165:		}
        1:  166:		else if (state->supplyCount[estate]!=8)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  167:		{
        1:  168:			printf("FAILURE: incorrect number of estate cards set: %i\n", state->supplyCount[estate]);
call    0 returned 100%
        -:  169:		}
        3:  170:		if (state->supplyCount[duchy]==8)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  171:		{
        2:  172:			printf("SUCCESS: correct number of duchy cards set: %i\n", state->supplyCount[duchy]);
call    0 returned 100%
        -:  173:		}
        1:  174:		else if (state->supplyCount[duchy]!=8)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  175:		{
        1:  176:			printf("FAILURE: incorrect number of duchy cards set: %i\n", state->supplyCount[duchy]);
call    0 returned 100%
        -:  177:		}
        3:  178:		if (state->supplyCount[province]==8)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  179:		{
        2:  180:			printf("SUCCESS: correct number of province cards set: %i\n", state->supplyCount[province]);
call    0 returned 100%
        -:  181:		}
        1:  182:		else if (state->supplyCount[province]!=8)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  183:		{
        1:  184:			printf("FAILURE: incorrect number of province cards set: %i\n", state->supplyCount[province]);
call    0 returned 100%
        -:  185:		}
        -:  186:
        -:  187:	}
        -:  188:	else 
        -:  189:	{
        3:  190:		if (numPlayers==3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  191:		{
        1:  192:			if (state->supplyCount[curse]==20)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  193:			{
        1:  194:				printf("SUCCESS: correct number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 returned 100%
        -:  195:
        -:  196:			}
        -:  197:			else 
        -:  198:			{
    #####:  199:				printf("FAILURE: incorrect number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 never executed
        -:  200:			}
        -:  201:		}
        3:  202:		if (numPlayers==4)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  203:		{
        1:  204:			if (state->supplyCount[curse]==30)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  205:			{
        1:  206:				printf("SUCCESS: correct number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 returned 100%
        -:  207:			}
        -:  208:			else 
        -:  209:			{
    #####:  210:				printf("FAILURE: incorrect number of curse cards set: %i\n", state->supplyCount[curse]);
call    0 never executed
        -:  211:			}
        -:  212:		}
        -:  213:			
        3:  214:		if (state->supplyCount[estate]==12)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  215:		{
        2:  216:			printf("SUCCESS: correct number of estate cards set: %i\n", state->supplyCount[estate]);
call    0 returned 100%
        -:  217:
        -:  218:		}
        1:  219:		else if (state->supplyCount[estate]!=12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  220:		{
        1:  221:			printf("FAILURE: incorrect number of estate cards set: %i\n", state->supplyCount[estate]);
call    0 returned 100%
        -:  222:		}
        3:  223:		if (state->supplyCount[duchy]==12)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  224:		{
        2:  225:			printf("SUCCESS: correct number of duchy cards set: %i\n", state->supplyCount[duchy]);
call    0 returned 100%
        -:  226:
        -:  227:		}
        1:  228:		else if (state->supplyCount[duchy]!=12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  229:		{
        1:  230:			printf("FAILURE: incorrect number of duchy cards set: %i\n", state->supplyCount[duchy]);
call    0 returned 100%
        -:  231:		}
        3:  232:		if (state->supplyCount[province]==12)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  233:		{
        2:  234:			printf("SUCCESS: correct number of province cards set: %i\n", state->supplyCount[province]);
call    0 returned 100%
        -:  235:
        -:  236:		}
        1:  237:		else if (state->supplyCount[province]!=12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  238:		{
        1:  239:			printf("FAILURE: incorrect number of province cards set: %i\n", state->supplyCount[province]);
call    0 returned 100%
        -:  240:		}
        -:  241:
        -:  242:
        -:  243:	}
        6:  244:	return 0;
        -:  245:}
function test_num_kingcard called 3 returned 100% blocks executed 80%
        3:  246:void test_num_kingcard(int numPlayers, struct gameState *state, int kingdomCards[10])
        -:  247:{
        -:  248:	int i;
        -:  249:	int j;
       63:  250:	for (i = adventurer; i <= treasure_map; i++)//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  251:	{
      495:  252:		for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  253:		{
      465:  254:			if (kingdomCards[j]==i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  255:			{
        -:  256:				//check if card is a 'Victory' Kingdom card
       30:  257:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  258:				{
       12:  259:					if (numPlayers==2)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  260:					{ 
        -:  261:						//state->supplyCount[i] = 8; 
        2:  262:						if (state->supplyCount[i]==8)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  263:						{
        2:  264:							printf("SUCCESS: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 returned 100%
        -:  265:						}
    #####:  266:						else if (state->supplyCount[i]!=8)
branch  0 never executed
branch  1 never executed
        -:  267:						{
    #####:  268:							printf("FAILURE: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 never executed
        -:  269:						}
        -:  270:					}
        -:  271:					else
        -:  272:					{ 
        -:  273:						//state->supplyCount[i] = 12; 
        4:  274:						if (state->supplyCount[i]==12)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  275:						{
        4:  276:							printf("SUCCESS: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 returned 100%
        -:  277:						}
    #####:  278:						else if (state->supplyCount[i]!=12)
branch  0 never executed
branch  1 never executed
        -:  279:						{
    #####:  280:							printf("FAILURE: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 never executed
        -:  281:						}
        -:  282:
        -:  283:					}
        -:  284:				}
        -:  285:				else
        -:  286:				{
        -:  287:					//state->supplyCount[i] = 10;
       24:  288:					if (state->supplyCount[i]==10)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  289:					{
       24:  290:						printf("SUCCESS: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 returned 100%
        -:  291:					}
    #####:  292:					else if (state->supplyCount[i]!=10)
branch  0 never executed
branch  1 never executed
        -:  293:					{
    #####:  294:						printf("FAILURE: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 never executed
        -:  295:					}
        -:  296:				}
       30:  297:	      		break;
        -:  298:			}
        -:  299:			else    //card is not in the set choosen for the game
        -:  300:			 {
        -:  301:				//state->supplyCount[i] = -1;
      435:  302:				if (state->supplyCount[i]==-1)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -:  303:				{
      300:  304:					printf("SUCCESS: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 returned 100%
        -:  305:				}
      135:  306:				else if (state->supplyCount[i]!=-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  307:				{
      135:  308:					printf("FAILURE: supplycount at %i is %i\n", i, state->supplyCount[i]);
call    0 returned 100%
        -:  309:				}
        -:  310:			}
        -:  311:	   }
        -:  312:	}
        -:  313:
        3:  314:}
