File 'randomtestadventurer.c'
Lines executed:100.00% of 292
Branches executed:100.00% of 66
Taken at least once:83.33% of 66
Calls executed:100.00% of 135
Creating 'randomtestadventurer.c.gcov'

File 'dominion.c'
Lines executed:32.92% of 568
Branches executed:29.02% of 417
Taken at least once:22.30% of 417
Calls executed:22.45% of 98
Creating 'dominion.c.gcov'

        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include "test_helpers.h"
function main called 1 returned 100% blocks executed 100%
        1:    9:int main(int argc, char *argv[]) 
        -:   10:{
        -:   11:	//an introduction
        1:   12:	printf("\n\n----STARTING RANDOM TESTS FOR ADVENTURER CARD----\n\n");
call    0 returned 100%
        1:   13:	printf("----Welcome to random card tests with adventurer----\n");
call    0 returned 100%
        1:   14:	printf("----We will test the Adventurer card using some random tests----\n");
call    0 returned 100%
        1:   15:	printf("----Adventurer is an Action card from the Base Set----\n");
call    0 returned 100%
        1:   16:	printf("-----It is a terminal Action card that digs for Treasure cards in the deck-----\n");
call    0 returned 100%
        1:   17:	printf("----If there is treasure in the players deck it should draw it-----\n");
call    0 returned 100%
        -:   18:	
        1:   19:	struct gameState *testAdventurer=newGame();
call    0 returned 100%
        1:   20:	int* kc_ac=kingdomCards(adventurer, smithy, embargo, village, minion, mine, cutpurse, sea_hag, tribute, baron);
call    0 returned 100%
        -:   21:	
        1:   22:	int numPlayers=2;
        1:   23:	int randomSeed=4;
        1:   24:	int card=adventurer;
        1:   25:	int choice1=0;
        1:   26:	int choice2=0; 
        1:   27:	int choice3=0;
        1:   28:	int handPos=0;
        1:   29:	int bonus=0;
        1:   30:	int x=0;
        1:   31:	int zeroPlayers=0;
        1:   32:	int onePlayers=0;
        1:   33:	int fivePlayers=0;
        1:   34:	int numTests=10;
        1:   35:	int testCounter=0;
        1:   36:	int PLAYERS_RANGE_FAIL_COUNT=0;
        1:   37:	int PLAYERS_RANGE_PASS_COUNT=0;
        1:   38:	int rp=-1;	
        -:   39:	
        1:   40:	printf("Step one: generate random number of players between 0 and %i; valid range is  %i to %i; tests will keep running until %i are reached and three upper and lower fail states (0, 1, and 5) are reached\n", MAX_PLAYERS+1, 2, MAX_PLAYERS, numTests);
call    0 returned 100%
        1:   41:	int successes=0;
        1:   42:	int failures=0;
        1:   43:	int handcountSuccesses=0;
        1:   44:	int handcountFailures=0;
        1:   45:	int discardSuccesses=0;
        1:   46:	int discardFailures=0;
        1:   47:	int deckSuccesses=0;
        1:   48:	int deckFailures=0;
        -:   49:	
        1:   50:	int totalHandcountFailures=0;
        1:   51:	int totalHandcountSuccesses=0;
        1:   52:	int totalDeckFailures=0;
        1:   53:	int totalDeckSuccesses=0;
        1:   54:	int totalDiscardFailures=0;
        1:   55:	int totalDiscardSuccesses=0;
        1:   56:	int failMeFlag=0;
        1:   57:	int failMeFlag2=0;
        -:   58:	
        1:   59:	int testSet1Failures=0;
        1:   60:	int testSet2Failures=0;
        -:   61:	
        1:   62:	int testSet1Successes=0;
        1:   63:	int testSet2Successes=0;
        -:   64:	
       13:   65:	while ((x<numTests)||(zeroPlayers==0)||(fivePlayers==0)||(onePlayers==0))
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
branch  6 taken 0%
branch  7 taken 100% (fallthrough)
        -:   66:	{
        -:   67:		//reset success and failure count for this loop
        -:   68:
       11:   69:		handcountSuccesses=0;
       11:   70:		handcountFailures=0;
       11:   71:		deckFailures=0;
       11:   72:		deckSuccesses=0;
       11:   73:		discardSuccesses=0;
       11:   74:		discardFailures=0;
       11:   75:		x++;//increment x closer to numTests
       11:   76:		testCounter++;//increment so we track how many tests we actually run
       11:   77:		printf("\n\n$ # $ # STARTING TEST %i FOR RANDOM NUMBER OF PLAYERS TEST $ # $ #\n\n", testCounter);
call    0 returned 100%
       11:   78:		numPlayers=rand() % (MAX_PLAYERS+2);
call    0 returned 100%
       11:   79:		if (numPlayers==0)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:   80:		{
        1:   81:			zeroPlayers=1;
        1:   82:			PLAYERS_RANGE_FAIL_COUNT++;
        -:   83:		}
       10:   84:		else if (numPlayers==1)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:   85:		{
        4:   86:			onePlayers=1;
        4:   87:			PLAYERS_RANGE_FAIL_COUNT++;
        -:   88:		}
        6:   89:		else if (numPlayers==5)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:   90:		{
        1:   91:			fivePlayers=1;
        1:   92:			PLAYERS_RANGE_FAIL_COUNT++;
        -:   93:		}		
        -:   94:		else 
        -:   95:		{
        5:   96:			PLAYERS_RANGE_PASS_COUNT++;
        -:   97:		}
       11:   98:		printf("Generated %i players\n", numPlayers);	
call    0 returned 100%
       11:   99:		int ret_val=initializeGame(numPlayers, kc_ac, randomSeed, testAdventurer);
call    0 returned 100%
       11:  100:		if (ret_val==-1)
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        -:  101:		{
        6:  102:			printf("initializeGame detected something wrong, restart without running tests to prevent segfault\n");
call    0 returned 100%
        -:  103:		}
       11:  104:		if (ret_val!=-1)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -:  105:		{
        -:  106:			
        5:  107:			printf("\n\n# # # #  STARTING TEST CASE 1 FOR TEST %i: Treasure in deck # # # #\n\n", testCounter);
call    0 returned 100%
        5:  108:			rp=whoseTurn(testAdventurer);
call    0 returned 100%
        5:  109:			testAdventurer->hand[rp][handPos]=adventurer;
        5:  110:			struct gameState *save=newGame();
call    0 returned 100%
        5:  111:			*save=*testAdventurer;
        5:  112:			printf("PLAYER: %i\n", rp);
call    0 returned 100%
        -:  113:			
        5:  114:			printf("At this point, we know that the player should have only treasure in the deck; so we expect that the hand count before and after should differ by two counts\n");
call    0 returned 100%
        5:  115:			printf("Player's %i hand count before: %i\n", rp, testAdventurer->handCount[rp]);
call    0 returned 100%
        5:  116:			printf ("Player %i's deck before\n", rp);
call    0 returned 100%
        5:  117:			printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        5:  118:			printf("Players %i's hand before\n", rp);
call    0 returned 100%
        5:  119:			printPlayerHand(rp, testAdventurer);
call    0 returned 100%
        5:  120:			if (failMeFlag==1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  121:			{
        1:  122:				testAdventurer->whoseTurn=rand() % numPlayers;
call    0 returned 100%
        -:  123:			}
        5:  124:			ret_val=cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);
call    0 returned 100%
        5:  125:			if (ret_val!=-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  126:			{
        5:  127:				printf("Player's hand count after: %i\n", testAdventurer->handCount[rp]);
call    0 returned 100%
        5:  128:				if (save->handCount[rp]+2==testAdventurer->handCount[rp])
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  129:				{
        4:  130:					printf("SUCCESS: correct number of items incremented from the count\n");		
call    0 returned 100%
        4:  131:					handcountSuccesses++;
        4:  132:					totalHandcountSuccesses++;
        -:  133:					
        4:  134:					successes++;
        -:  135:				}
        -:  136:				else 
        -:  137:				{
        1:  138:					printf("FAILURE: incorrect number of items incremented from the count\n");
call    0 returned 100%
        1:  139:					failures++;
        1:  140:					totalHandcountFailures++;
        1:  141:					handcountFailures++;
        -:  142:				}
        -:  143:
        5:  144:				printf("# # # # HANDCOUNT REPORT: %i successes, %i failures # # # #\n", handcountSuccesses, handcountFailures);
call    0 returned 100%
        5:  145:				printf("# # # # UPDATED TOTAL HANDCOUNT REPORT: %i total failures, %i total successes\n", totalHandcountFailures, totalHandcountSuccesses);
call    0 returned 100%
        -:  146:
        5:  147:				printf("Checking player deck count\n");
call    0 returned 100%
        5:  148:				if (save->deckCount[rp]-2==testAdventurer->deckCount[rp])
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  149:				{
        4:  150:					printf("SUCCESS: correct number of treasure cards mined\n");
call    0 returned 100%
        4:  151:					successes++;
        4:  152:					deckSuccesses++;
        4:  153:					totalDeckSuccesses++;	
        -:  154:				}
        -:  155:				else 
        -:  156:				{
        1:  157:					printf("FAILURE: incorrect number of treasure cards mined\n");
call    0 returned 100%
        1:  158:					failures++;
        1:  159:					deckFailures++;
        1:  160:					totalDeckFailures++;
        -:  161:				}
        5:  162:				printf("# # # # DECK COUNT REPORT: %i successes, %i failures # # # #\n", deckSuccesses, deckFailures);
call    0 returned 100%
        5:  163:				printf("# # # # UPDATED TOTAL DECK REPORT: %i total failures, %i total successes\n", totalDeckFailures, totalDeckSuccesses);	
call    0 returned 100%
        5:  164:				printf("Player's %i hand count after: %i\n", rp, testAdventurer->handCount[rp]);
call    0 returned 100%
        5:  165:				printf ("Player %i's deck after\n", rp);
call    0 returned 100%
        5:  166:				printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        5:  167:				printf("Players %i's hand after\n", rp);
call    0 returned 100%
        5:  168:				printPlayerHand(rp, testAdventurer);
call    0 returned 100%
        5:  169:				printf("\n\n# # # #  FINISHED TEST CASE 1 FOR TEST %i: Treasure in deck # # # #\n\n", testCounter);
call    0 returned 100%
        5:  170:				printf("\n\n# # # #  STARTING TEST CASE 2 FOR TEST %i: No Treasure in deck # # # #\n\n", testCounter);
call    0 returned 100%
        5:  171:				*testAdventurer=*save;
        5:  172:				rp=whoseTurn(testAdventurer);
call    0 returned 100%
        5:  173:				printf("Setting all cards for player %i's deck to curse\n", rp);
call    0 returned 100%
        5:  174:				int i=0;
       35:  175:				for (i=0; i < testAdventurer->deckCount[rp]+1; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  176:				{
       30:  177:					testAdventurer->deck[rp][i]=0;
        -:  178:				}
        5:  179:				printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        5:  180:				printf("Discard count before call %i\n", testAdventurer->discardCount[rp]);
call    0 returned 100%
        5:  181:				printf("Testing card effect with only curse cards in deck; expecting discard count to increment by5\n");
call    0 returned 100%
        5:  182:				cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);
call    0 returned 100%
        5:  183:				if (failMeFlag2==1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  184:				{
        1:  185:					testAdventurer->discardCount[rp]=rand() % 10;
call    0 returned 100%
        -:  186:				}
        5:  187:				printf("Player %i deck before\n", rp);
call    0 returned 100%
        5:  188:				printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        5:  189:				printf("Player %i hand before\n", rp);
call    0 returned 100%
        5:  190:				printPlayerHand(rp, testAdventurer);
call    0 returned 100%
        -:  191:				
        5:  192:				if (save->discardCount[rp]+5==testAdventurer->discardCount[rp])
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  193:				{
        4:  194:					printf("SUCCESS: discard count is %i\n", testAdventurer->discardCount[rp]);
call    0 returned 100%
        4:  195:					discardSuccesses++;
        4:  196:					totalDiscardSuccesses++;
        4:  197:					successes++;
        -:  198:				}
        -:  199:				else 
        -:  200:				{
        1:  201:					printf("FAILURE: discard count is %i\n", testAdventurer->discardCount[rp]);
call    0 returned 100%
        1:  202:					discardFailures++;
        1:  203:					totalDiscardFailures++;
        1:  204:					failures++;
        -:  205:				}
        5:  206:				printf("DISCARD DECK AFTER\n");
call    0 returned 100%
        5:  207:				printDiscard(rp, testAdventurer);
call    0 returned 100%
        5:  208:				printf("# # # # DISCARD REPORT: %i successes, %i failures # # # #\n", discardSuccesses, discardFailures);
call    0 returned 100%
        5:  209:				printf("# # # # UPDATED TOTAL Discard REPORT: %i total failures, %i total successes\n", totalDiscardFailures, totalDiscardSuccesses);
call    0 returned 100%
        -:  210:
        5:  211:				printf("\n\n# # # #  FINISHED TEST CASE 2 FOR TEST %i: No Treasure in deck # # # #\n\n", testCounter);
call    0 returned 100%
        5:  212:				printf("# # # # TOTAL REPORT %i successes, %i failures # # # #\n", successes, failures);
call    0 returned 100%
        -:  213:			
        -:  214:			}
        -:  215:			
        -:  216:		}
       11:  217:		if (x==numTests)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -:  218:		{
        2:  219:			if ((totalHandcountFailures==0)||(totalDeckFailures==0)||(totalDiscardFailures==0))
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  220:			{
        1:  221:				printf("Missing failures; restart with fail me flag\n");
call    0 returned 100%
        -:  222:				
        1:  223:				printf("handcountfailures in total: %i\ndeckfailures in total: %i\ndiscardfailures in total: %i\n", totalHandcountFailures, totalDeckFailures, totalDiscardFailures);
call    0 returned 100%
        -:  224:				//set flag to start fail state
        1:  225:				if (totalDiscardFailures==0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  226:				{
        1:  227:					failMeFlag2=1;
        -:  228:				}
        1:  229:				failMeFlag=1;
        1:  230:				x--;
        -:  231:			}
        -:  232:		}
       11:  233:		printf("\n\n $ # $ # FINISHED TEST %i FOR RANDOM NUMBER OF PLAYERS TEST $ # $ #\n\n", testCounter);
call    0 returned 100%
        -:  234:	
        -:  235:	}
        -:  236:	
        1:  237:	printf("# # # # Finished randomize numPlayers test # # # #\n");
call    0 returned 100%
        1:  238:	printf("# # # # REPORT: Ran test %i times # # # #\n", testCounter);
call    0 returned 100%
        1:  239:	printf("# # # # REPORT: Reached fail states %i times # # # #\n", PLAYERS_RANGE_FAIL_COUNT);
call    0 returned 100%
        1:  240:	printf("# # # # REPORT: Reached success states %i times # # # #\n", PLAYERS_RANGE_PASS_COUNT);
call    0 returned 100%
        1:  241:	printf("\n\n----FINISHED ALL RANDOM TESTS FOR ADVENTURER CARD----\n\n");
call    0 returned 100%
        -:  242:	//save final set of successes and failures
        1:  243:	testSet1Failures=failures;
        1:  244:	testSet1Successes=successes;
        -:  245:	
        -:  246:	//reset failme flag
        1:  247:	failMeFlag=0;
        1:  248:	failMeFlag2=0;
        -:  249:	//reset total failures;
        1:  250:	totalHandcountFailures=0;
        1:  251:	totalHandcountSuccesses=0;
        1:  252:	totalDeckFailures=0;
        1:  253:	totalDeckSuccesses=0;
        1:  254:	totalDiscardFailures=0;
        1:  255:	totalDiscardSuccesses=0;
        -:  256:		
        1:  257:	failures=0;
        1:  258:	successes=0;
        1:  259:	numPlayers=4;
        1:  260:	x=0;
        1:  261:	printf("Step two: generate random hand position in the range of 0 to %i\n", testAdventurer->handCount[rp]);
call    0 returned 100%
        1:  262:		testCounter=0;
        -:  263:	
       13:  264:	while (x<numTests)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  265:	{
       11:  266:		x++;
       11:  267:		testCounter++;
       11:  268:		int ret_val=initializeGame(numPlayers, kc_ac, randomSeed, testAdventurer);
call    0 returned 100%
       11:  269:		rp=whoseTurn(testAdventurer);
call    0 returned 100%
       11:  270:		handPos=rand() % testAdventurer->handCount[rp];
call    0 returned 100%
       11:  271:		printf("\n\n$ # $ # STARTING TEST %i FOR RANDOM HANDPOS FOR PLAYER %i $ # $ #\n\n", testCounter, rp);
call    0 returned 100%
       11:  272:		printf("Generated handpos %i\n", handPos);
call    0 returned 100%
       11:  273:		testAdventurer->hand[rp][handPos]=adventurer;
        -:  274:		//reset success and failure count for this loop
        -:  275:
       11:  276:		handcountSuccesses=0;
       11:  277:		handcountFailures=0;
       11:  278:		deckFailures=0;
       11:  279:		deckSuccesses=0;
       11:  280:		discardSuccesses=0;
       11:  281:		discardFailures=0;
       11:  282:		printf("\n\n$ # $ # STARTING TEST %i FOR RANDOM NUMBER OF PLAYERS TEST $ # $ #\n\n", testCounter);
call    0 returned 100%
        -:  283:		/*if (ret_val==-1)
        -:  284:		{
        -:  285:			printf("initializeGame detected something wrong, restart without running tests to prevent segfault\n");
        -:  286:		}*/
       11:  287:		if (ret_val!=-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  288:		{
        -:  289:			
       11:  290:			printf("\n\n# # # #  STARTING TEST CASE 1 FOR TEST %i: Treasure in deck # # # #\n\n", testCounter);
call    0 returned 100%
       11:  291:			rp=whoseTurn(testAdventurer);
call    0 returned 100%
       11:  292:			testAdventurer->hand[rp][handPos]=adventurer;
       11:  293:			struct gameState *save=newGame();
call    0 returned 100%
       11:  294:			*save=*testAdventurer;
       11:  295:			printf("PLAYER: %i\n", rp);
call    0 returned 100%
        -:  296:			
       11:  297:			printf("At this point, we know that the player should have only treasure in the deck; so we expect that the hand count before and after should differ by two counts\n");
call    0 returned 100%
       11:  298:			printf("Player's %i hand count before: %i\n", rp, testAdventurer->handCount[rp]);
call    0 returned 100%
       11:  299:			printf ("Player %i's deck before\n", rp);
call    0 returned 100%
       11:  300:			printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
       11:  301:			printf("Players %i's hand before\n", rp);
call    0 returned 100%
       11:  302:			printPlayerHand(rp, testAdventurer);
call    0 returned 100%
       11:  303:			if (failMeFlag==1)
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        -:  304:			{
        1:  305:				testAdventurer->whoseTurn=rand() % numPlayers;
call    0 returned 100%
        -:  306:			}
        -:  307:
       11:  308:			ret_val=cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);
call    0 returned 100%
        -:  309:			
        -:  310:			//HOW TO REACH THIS STATE?
        -:  311:			/*if (ret_val==-1)	
        -:  312:			{
        -:  313:				printf("cardEffect detected something wrong, restart\n");
        -:  314:			}*/
       11:  315:			if (ret_val!=-1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  316:			{
       11:  317:				printf("Player's hand count after: %i\n", testAdventurer->handCount[rp]);
call    0 returned 100%
       11:  318:				if (save->handCount[rp]+2==testAdventurer->handCount[rp])
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:  319:				{
       10:  320:					printf("SUCCESS: correct number of items incremented from the count\n");		
call    0 returned 100%
       10:  321:					handcountSuccesses++;
       10:  322:					totalHandcountSuccesses++;
        -:  323:					
       10:  324:					successes++;
        -:  325:				}
        -:  326:				else 
        -:  327:				{
        1:  328:					printf("FAILURE: incorrect number of items incremented from the count\n");
call    0 returned 100%
        1:  329:					failures++;
        1:  330:					totalHandcountFailures++;
        1:  331:					handcountFailures++;
        -:  332:				}
        -:  333:
       11:  334:				printf("# # # # HANDCOUNT REPORT: %i successes, %i failures # # # #\n", handcountSuccesses, handcountFailures);
call    0 returned 100%
       11:  335:				printf("# # # # UPDATED TOTAL HANDCOUNT REPORT: %i total failures, %i total successes\n", totalHandcountFailures, totalHandcountSuccesses);
call    0 returned 100%
        -:  336:
       11:  337:				printf("Checking player deck count\n");
call    0 returned 100%
       11:  338:				if (save->deckCount[rp]-2==testAdventurer->deckCount[rp])
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
        -:  339:				{
       10:  340:					printf("SUCCESS: correct number of treasure cards mined\n");
call    0 returned 100%
       10:  341:					successes++;
       10:  342:					deckSuccesses++;
       10:  343:					totalDeckSuccesses++;	
        -:  344:				}
        -:  345:				else 
        -:  346:				{
        1:  347:					printf("FAILURE: incorrect number of treasure cards mined\n");
call    0 returned 100%
        1:  348:					failures++;
        1:  349:					deckFailures++;
        1:  350:					totalDeckFailures++;
        -:  351:				}
       11:  352:				printf("# # # # DECK COUNT REPORT: %i successes, %i failures # # # #\n", deckSuccesses, deckFailures);
call    0 returned 100%
       11:  353:				printf("# # # # UPDATED TOTAL DECK REPORT: %i total failures, %i total successes\n", totalDeckFailures, totalDeckSuccesses);	
call    0 returned 100%
       11:  354:				printf("Player's %i hand count after: %i\n", rp, testAdventurer->handCount[rp]);
call    0 returned 100%
       11:  355:				printf ("Player %i's deck after\n", rp);
call    0 returned 100%
       11:  356:				printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
       11:  357:				printf("Players %i's hand after\n", rp);
call    0 returned 100%
       11:  358:				printPlayerHand(rp, testAdventurer);
call    0 returned 100%
       11:  359:				printf("\n\n# # # #  FINISHED TEST CASE 1 FOR TEST %i: Treasure in deck # # # #\n\n", testCounter);
call    0 returned 100%
       11:  360:				printf("\n\n# # # #  STARTING TEST CASE 2 FOR TEST %i: No Treasure in deck # # # #\n\n", testCounter);
call    0 returned 100%
       11:  361:				*testAdventurer=*save;
       11:  362:				rp=whoseTurn(testAdventurer);
call    0 returned 100%
       11:  363:				printf("Setting all cards for player %i's deck to curse\n", rp);
call    0 returned 100%
       11:  364:				int i=0;
       77:  365:				for (i=0; i < testAdventurer->deckCount[rp]+1; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  366:				{
       66:  367:					testAdventurer->deck[rp][i]=0;
        -:  368:				}
       11:  369:				printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
       11:  370:				printf("Discard count before call %i\n", testAdventurer->discardCount[rp]);
call    0 returned 100%
       11:  371:				printf("Testing card effect with only curse cards in deck; expecting discard count to increment by5\n");
call    0 returned 100%
       11:  372:				cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);
call    0 returned 100%
        -:  373:				/*if (failMeFlag2==1)
        -:  374:				{
        -:  375:					testAdventurer->discardCount[rp]=rand() % 10;
        -:  376:				}*/
       11:  377:				printf("Player %i deck before\n", rp);
call    0 returned 100%
       11:  378:				printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
       11:  379:				printf("Player %i hand before\n", rp);
call    0 returned 100%
       11:  380:				printPlayerHand(rp, testAdventurer);
call    0 returned 100%
        -:  381:				
       11:  382:				if (save->discardCount[rp]+5==testAdventurer->discardCount[rp])
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
        -:  383:				{
        9:  384:					printf("SUCCESS: discard count is %i\n", testAdventurer->discardCount[rp]);
call    0 returned 100%
        9:  385:					discardSuccesses++;
        9:  386:					totalDiscardSuccesses++;
        9:  387:					successes++;
        -:  388:				}
        -:  389:				else 
        -:  390:				{
        2:  391:					printf("FAILURE: discard count is %i\n", testAdventurer->discardCount[rp]);
call    0 returned 100%
        2:  392:					discardFailures++;
        2:  393:					totalDiscardFailures++;
        2:  394:					failures++;
        -:  395:				}
       11:  396:				printf("DISCARD DECK AFTER\n");
call    0 returned 100%
       11:  397:				printDiscard(rp, testAdventurer);
call    0 returned 100%
       11:  398:				printf("# # # # DISCARD REPORT: %i successes, %i failures # # # #\n", discardSuccesses, discardFailures);
call    0 returned 100%
       11:  399:				printf("# # # # UPDATED TOTAL Discard REPORT: %i total failures, %i total successes\n", totalDiscardFailures, totalDiscardSuccesses);
call    0 returned 100%
        -:  400:
       11:  401:				printf("\n\n# # # #  FINISHED TEST CASE 2 FOR TEST %i: No Treasure in deck # # # #\n\n", testCounter);
call    0 returned 100%
       11:  402:				printf("# # # # TOTAL REPORT %i successes, %i failures # # # #\n", successes, failures);
call    0 returned 100%
        -:  403:			
        -:  404:			}
        -:  405:			
        -:  406:		}
       11:  407:		if (x==numTests)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -:  408:		{
        2:  409:			if ((totalHandcountFailures==0)||(totalDeckFailures==0)||(totalDiscardFailures==0))
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  410:			{
        1:  411:				printf("Missing failures; restart with fail me flag\n");
call    0 returned 100%
        -:  412:				
        1:  413:				printf("handcountfailures in total: %i\ndeckfailures in total: %i\ndiscardfailures in total: %i\n", totalHandcountFailures, totalDeckFailures, totalDiscardFailures);
call    0 returned 100%
        1:  414:				failMeFlag=1;
        1:  415:				x--;
        -:  416:			}
        -:  417:		}
       11:  418:		printf("\n\n $ # $ # FINISHED TEST %i FOR RANDOM HANDPOS TEST $ # $ #\n\n", testCounter);
call    0 returned 100%
        -:  419:	
        -:  420:	}
        -:  421:	//save final set of successes and failures
        1:  422:	testSet2Failures=failures;
        1:  423:	testSet2Successes=successes;
        -:  424:	
        1:  425:	printf("# # # # Finished randomize numPlayers test # # # #\n");
call    0 returned 100%
        1:  426:	printf("# # # # REPORT: Ran test %i times # # # #\n", testCounter);
call    0 returned 100%
        1:  427:	printf("\n\n----FINISHED ALL RANDOM TESTS FOR ADVENTURER CARD----\n\n");
call    0 returned 100%
        1:  428:	printf("^^^^^^^^^^^^ FINAL REPORT ^^^^^^^^^^^\n");
call    0 returned 100%
        1:  429:	printf("Test Set 1 (random player number) successes: %i\n", testSet1Successes);
call    0 returned 100%
        1:  430:	printf("Test Set 1 (random player number) failures: %i\n", testSet1Failures);
call    0 returned 100%
        -:  431:	
        1:  432:	printf("Test Set 2 (random hand pos) successes: %i\n", testSet2Successes);
call    0 returned 100%
        1:  433:	printf("Test Set 2 (random hand pos) failures: %i\n", testSet2Failures);
call    0 returned 100%
        -:  434:	
        -:  435:
        -:  436:
        1:  437:	return 0;
        -:  438:
        -:  439:}
        -:  440:
