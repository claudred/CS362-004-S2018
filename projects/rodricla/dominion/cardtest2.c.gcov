        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include "test_helpers.h"
function main called 1 returned 100% blocks executed 80%
        -:    9:int main(int argc, char *argv[]) 
        -:   10:{
        1:   11:	printf("----STARTING TESTS----\n\n\n");
        1:   12:	printf("----Welcome to cardtest2.c----\n");
        1:   13:	printf("----We will test the Adventurer card in this unit test----\n");
        1:   14:	printf("----Adventurer is an Action card from the Base Set----\n");
        1:   15:	printf("-----It is a terminal Action card that digs for Treasure cards in the deck-----\n");
        1:   16:	printf("----TEST 1: If there is treasure in the players deck it should draw it-----\n");
        -:   17:	
        1:   18:	struct gameState *testAdventurer=newGame();
        -:   19:	
        1:   20:	int* kc_ac=kingdomCards(adventurer, smithy, embargo, village, minion, mine, cutpurse, sea_hag, tribute, baron);
        1:   21:	int numPlayers=2;
        1:   22:	int randomSeed=random();
        1:   23:	int card=adventurer;
        1:   24:	int choice1=0;
        1:   25:	int choice2=0; 
        1:   26:	int choice3=0;
        1:   27:	int handPos=0;
        1:   28:	int bonus=0;
        -:   29:	//relevant player we're testing.
        1:   30:	int rp=-1;	
        1:   31:	initializeGame(numPlayers, kc_ac, randomSeed, testAdventurer);
        1:   32:	testAdventurer->hand[rp][handPos]=adventurer;
        1:   33:	printSupplyCount(testAdventurer);
        -:   34:	
        1:   35:	struct gameState *save=newGame();
        1:   36:	*save=*testAdventurer;
        1:   37:	rp=whoseTurn(testAdventurer);
        1:   38:	printPlayerDeck(rp, testAdventurer);
        1:   39:	printf("PLAYER: %i\n", rp);
        1:   40:	printf("At this point, we know that the player should have only treasure in the deck; so we expect that the hand count before and after should differ by two counts\n");
        1:   41:	printf("Player's hand count before: %i\n", testAdventurer->handCount[rp]);
        1:   42:	printPlayerDeck(rp, testAdventurer);
        1:   43:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);	
        -:   44:	/*if (checkLastPlayed(adventurer, testAdventurer)==1)
        -:   45:	{
        -:   46:		printf("SUCCESS: Last played card was adventurer\n");
        -:   47:	}
        -:   48:	else {
        -:   49:		printf("FAILURE: last played card was: %i\n", testAdventurer->playedCards[testAdventurer->playedCardCount]);
        -:   50:	}
        -:   51:	if (checkLastDiscard(rp, card, testAdventurer)==1)
        -:   52:	{
        -:   53:		printf("LAST DISCARDED CARD IS %i\n", testAdventurer->discard[rp][testAdventurer->discardCount[rp]]);
        -:   54:	}*/
        -:   55:
        1:   56:	printf("Player's hand count after: %i\n", testAdventurer->handCount[rp]);
        1:   57:	if (save->handCount[rp]+2==testAdventurer->handCount[rp])
branch  0 taken 100%
branch  1 taken 0%
        -:   58:	{
        1:   59:		printf("SUCCESS: correct number of items incremented from the count\n");
        -:   60:		
        1:   61:	}
        -:   62:	else 
        -:   63:	{
    #####:   64:		printf("FAILURE: incorrect number of items incremented from the count\n");
        -:   65:	}
        1:   66:	printf("Checking player deck count\n");
        1:   67:	if (save->deckCount[rp]-2==testAdventurer->deckCount[rp])
branch  0 taken 100%
branch  1 taken 0%
        -:   68:	{
        1:   69:		printf("SUCCESS: correct number of treasure cards mined\n");
        1:   70:	}
        -:   71:	else 
        -:   72:	{
    #####:   73:		printf("FAILURE: incorrect number of treasure cards mined\n");
        -:   74:	}
        1:   75:	printPlayerDeck(rp, testAdventurer);
        1:   76:	printf("TEST CASE 2: No treasure in deck; \n");
        1:   77:	*testAdventurer=*save;
        1:   78:	rp=whoseTurn(testAdventurer);
        1:   79:	printf("Setting all cards for player %i's deck to curse\n", rp);
        1:   80:	int i=0;
       14:   81:	for (i=0; i < testAdventurer->deckCount[rp]+1; i++)
branch  0 taken 86%
branch  1 taken 14%
        -:   82:	{
        6:   83:		testAdventurer->deck[rp][i]=0;
        6:   84:	}
        1:   85:	printPlayerDeck(rp, testAdventurer);
        1:   86:	printf("Discard count before call %i\n", testAdventurer->discardCount[rp]);
        1:   87:	printf("Testing card effect with only curse cards in deck; expecting discard count to increment by 5\n");
        1:   88:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);
        1:   89:	printPlayerDeck(rp, testAdventurer);
        1:   90:	printPlayerHand(rp, testAdventurer);
        1:   91:	if (save->discardCount[rp]+5==testAdventurer->discardCount[rp])
branch  0 taken 100%
branch  1 taken 0%
        -:   92:	{
        1:   93:		printf("SUCCESS: discard count is %i\n", testAdventurer->discardCount[rp]);
        1:   94:	}
        -:   95:	else 
        -:   96:	{
    #####:   97:		printf("FAILURE: discard count is %i\n", testAdventurer->discardCount[rp]);
        -:   98:	}
        1:   99:	printDiscard(rp, testAdventurer);
        -:  100:	/*
        -:  101:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);	
        -:  102:	printPlayerDeck(rp, testAdventurer);
        -:  103:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);	
        -:  104:	printPlayerDeck(rp, testAdventurer);*/
        1:  105:	printf("\n\n\n----FINISHED ALL TESTS--\n");
        -:  106:
        1:  107:}
        -:  108:
        -:  109:/*
        -:  110:
        -:  111://ADVENTURE CARD
        -:  112:
        -:  113:*/
        -:  114:
        -:  115:/**************
        -:  116:
        -:  117:		
        -:  118:
        -:  119:**************/
