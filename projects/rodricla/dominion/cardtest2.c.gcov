        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include "test_helpers.h"
function main called 1 returned 100% blocks executed 93%
        1:    9:int main(int argc, char *argv[]) 
        -:   10:{
        1:   11:	printf("----STARTING TESTS----\n\n\n");
call    0 returned 100%
        1:   12:	printf("----Welcome to cardtest2.c----\n");
call    0 returned 100%
        1:   13:	printf("----We will test the Adventurer card in this unit test----\n");
call    0 returned 100%
        1:   14:	printf("----Adventurer is an Action card from the Base Set----\n");
call    0 returned 100%
        1:   15:	printf("-----It is a terminal Action card that digs for Treasure cards in the deck-----\n");
call    0 returned 100%
        1:   16:	printf("----TEST 1: If there is treasure in the players deck it should draw it-----\n");
call    0 returned 100%
        -:   17:	
        1:   18:	struct gameState *testAdventurer=newGame();
call    0 returned 100%
        -:   19:	//int kc_ac[10]={1, 2, 3, 4, 5, 6, 7, 8, 9, 10};	
        1:   20:	int* kc_ac=kingdomCards(adventurer, smithy, embargo, village, minion, mine, cutpurse, sea_hag, tribute, baron);
call    0 returned 100%
        1:   21:	int numPlayers=2;
        1:   22:	int randomSeed=1234;
        -:   23:
        1:   24:	int card=adventurer;
        1:   25:	int choice1=0;
        1:   26:	int choice2=0; 
        1:   27:	int choice3=0;
        1:   28:	int handPos=0;
        1:   29:	int bonus=0;
        -:   30:	
        -:   31:	//relevant player we're testing.
        1:   32:	int rp=-1;	
        1:   33:	initializeGame(numPlayers, kc_ac, randomSeed, testAdventurer);
call    0 returned 100%
        -:   34:	
        1:   35:	rp=whoseTurn(testAdventurer);
call    0 returned 100%
        1:   36:	testAdventurer->hand[rp][handPos]=adventurer;
        1:   37:	printSupplyCount(testAdventurer);
call    0 returned 100%
        -:   38:	
        1:   39:	struct gameState *save=newGame();
call    0 returned 100%
        1:   40:	*save=*testAdventurer;
        -:   41://	printPlayerDeck(rp, testAdventurer);
        1:   42:	printf("PLAYER: %i\n", rp);
call    0 returned 100%
        1:   43:	printf("At this point, we know that the player should have only treasure in the deck; so we expect that the hand count before and after should differ by two counts\n");
call    0 returned 100%
        1:   44:	printf("Player's hand count before: %i\n", testAdventurer->handCount[rp]);
call    0 returned 100%
        1:   45:	printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        1:   46:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);	
call    0 returned 100%
        -:   47:	/*if (checkLastPlayed(adventurer, testAdventurer)==1)
        -:   48:	{
        -:   49:		printf("SUCCESS: Last played card was adventurer\n");
        -:   50:	}
        -:   51:	else {
        -:   52:		printf("FAILURE: last played card was: %i\n", testAdventurer->playedCards[testAdventurer->playedCardCount]);
        -:   53:	}
        -:   54:	if (checkLastDiscard(rp, card, testAdventurer)==1)
        -:   55:	{
        -:   56:		printf("LAST DISCARDED CARD IS %i\n", testAdventurer->discard[rp][testAdventurer->discardCount[rp]]);
        -:   57:	}*/
        -:   58:
        1:   59:	printf("Player's hand count after: %i\n", testAdventurer->handCount[rp]);
call    0 returned 100%
        1:   60:	if (save->handCount[rp]+2==testAdventurer->handCount[rp])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   61:	{
        1:   62:		printf("SUCCESS: correct number of items incremented from the count\n");
call    0 returned 100%
        -:   63:		
        -:   64:	}
        -:   65:	else 
        -:   66:	{
    #####:   67:		printf("FAILURE: incorrect number of items incremented from the count\n");
call    0 never executed
        -:   68:	}
        1:   69:	printf("Checking player deck count\n");
call    0 returned 100%
        1:   70:	if (save->deckCount[rp]-2==testAdventurer->deckCount[rp])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   71:	{
        1:   72:		printf("SUCCESS: correct number of treasure cards mined\n");
call    0 returned 100%
        -:   73:	}
        -:   74:	else 
        -:   75:	{
    #####:   76:		printf("FAILURE: incorrect number of treasure cards mined\n");
call    0 never executed
        -:   77:	}
        1:   78:	printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        1:   79:	printf("TEST CASE 2: No treasure in deck; \n");
call    0 returned 100%
        1:   80:	*testAdventurer=*save;
        1:   81:	rp=whoseTurn(testAdventurer);
call    0 returned 100%
        1:   82:	printf("Setting all cards for player %i's deck to curse\n", rp);
call    0 returned 100%
        1:   83:	int i=0;
        7:   84:	for (i=0; i < testAdventurer->deckCount[rp]+1; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   85:	{
        6:   86:		testAdventurer->deck[rp][i]=0;
        -:   87:	}
        1:   88:	printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        1:   89:	printf("Discard count before call %i\n", testAdventurer->discardCount[rp]);
call    0 returned 100%
        1:   90:	printf("Testing card effect with only curse cards in deck; expecting discard count to increment by 5\n");
call    0 returned 100%
        1:   91:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);
call    0 returned 100%
        1:   92:	printPlayerDeck(rp, testAdventurer);
call    0 returned 100%
        1:   93:	printPlayerHand(rp, testAdventurer);
call    0 returned 100%
        1:   94:	if (save->discardCount[rp]+5==testAdventurer->discardCount[rp])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   95:	{
    #####:   96:		printf("SUCCESS: discard count is %i\n", testAdventurer->discardCount[rp]);
call    0 never executed
        -:   97:	}
        -:   98:	else 
        -:   99:	{
        1:  100:		printf("FAILURE: discard count is %i\n", testAdventurer->discardCount[rp]);
call    0 returned 100%
        -:  101:	}
        1:  102:	printDiscard(rp, testAdventurer);
call    0 returned 100%
        -:  103:	/*
        -:  104:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);	
        -:  105:	printPlayerDeck(rp, testAdventurer);
        -:  106:	cardEffect(card, choice1, choice2, choice3, testAdventurer, handPos, &bonus);	
        -:  107:	printPlayerDeck(rp, testAdventurer);*/
        1:  108:	printf("\n\n\n----FINISHED ALL TESTS--\n");
call    0 returned 100%
        1:  109:	return 0;
        -:  110:
        -:  111:}
