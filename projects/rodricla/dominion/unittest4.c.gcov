        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
function main called 1 returned 100% blocks executed 84%
        -:    8:int main(int argc, char *argv[]) 
        -:    9:{
        1:   10:	printf("testing function `buyCard`, which takes parameters 'int supplyPos', and 'struct gameState *state'\n");
        1:   11:	printf("-----START: TEST CASES 1 to 27------\n\n");
        -:   12:	//printf("%i", treasure_map);
        1:   13:	int all_cards[27]={0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26};
        1:   14:	int i=0; 
        1:   15:	struct gameState *testGame=newGame();
        1:   16:	int *kc1=kingdomCards(adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron, great_hall);
        1:   17:	initializeGame(2, kc1, 3, testGame);
        1:   18:	printf("You start the game with %i coins\n", testGame->coins);
        1:   19:	int returnVal=0;
        1:   20:	int num_buys_before=0;
        1:   21:	int num_buys_after=0;
        1:   22:	int coins_before=0;
        1:   23:	int coins_after=0;
        1:   24:	int card_cost=0;
        1:   25:	int num_card_before=0;
        -:   26:	
       56:   27:	for (i=0; i < 27; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:   28:	{
       27:   29:		coins_before=testGame->coins;
       27:   30:		num_buys_before=testGame->numBuys;
       27:   31:		num_card_before=testGame->supplyCount[i];
       27:   32:		printf("STATUS BEFORE: coins: %i, buys: %i, number of %i card left: %i\n", coins_before, num_buys_before, i, num_card_before);
       27:   33:		printf("TESTING BUYCARD with card %i\n", i);
       27:   34:		returnVal=buyCard(i, testGame);
       27:   35:		card_cost=getCost(i);
       27:   36:		if (num_card_before<=0)
branch  0 taken 37%
branch  1 taken 63%
        -:   37:		{
       10:   38:			if (returnVal==-1)
branch  0 taken 100%
branch  1 taken 0%
        -:   39:			{
       10:   40:				printf("SUCCESS: registered that the number of cards was not enough to buy\n");
       10:   41:			}
        -:   42:			else {
    #####:   43:				printf("FAILURE: did not register that the number of cards was not enough to buy\n");
        -:   44:			}
        -:   45:
       10:   46:		}
       27:   47:		if (card_cost>coins_before)
branch  0 taken 67%
branch  1 taken 33%
        -:   48:		{
       18:   49:			if (returnVal==-1)
branch  0 taken 100%
branch  1 taken 0%
        -:   50:			{
       18:   51:				if (coins_after==coins_before)
branch  0 taken 0%
branch  1 taken 100%
        -:   52:				{
    #####:   53:					printf("SUCCESS: registered that did not have enough money to buy cards and did not charge\n");
        -:   54:					
    #####:   55:				}
       18:   56:			}
        -:   57:			else 
        -:   58:			{
    #####:   59:				printf("FAILURE: did not register that did not have enough money to buy cards.\n");
        -:   60:			}
        -:   61:				
       18:   62:		}
        9:   63:		else if (card_cost<coins_before)
branch  0 taken 44%
branch  1 taken 56%
        -:   64:		{
        4:   65:			if (returnVal==-1)
branch  0 taken 25%
branch  1 taken 75%
        1:   66:				printf("FAILURE: had enough money to buy cards but some issue occurred; or SUCCESS if other issue shown\n");
        3:   67:			else if (coins_after==coins_before-card_cost)
branch  0 taken 0%
branch  1 taken 100%
    #####:   68:				printf("SUCCESS: coins after are equal to coins before minus the coin cost\n");
        4:   69:		}
        -:   70:		
        -:   71:		
        -:   72:	
       27:   73:		printf("STATUS AFTER:  coins: %i, buys: %i, number of %i card left: %i\n", testGame->coins, testGame->numBuys, i, testGame->supplyCount[i]);
       27:   74:		printf("%i\n", returnVal);
       27:   75:		printf("RE-ADDING COINS, CARDs AND NUM BUYS TO KEEP TESTING\n");
       27:   76:		testGame->coins=coins_before;
       27:   77:		testGame->numBuys=num_buys_before;
       27:   78:		testGame->supplyCount[i]=num_card_before;
        -:   79:		
        -:   80:		
       27:   81:	}
        1:   82:	printf("-----FINISHED: TEST CASE 1-27------\n\n");
        -:   83:
        1:   84:}
