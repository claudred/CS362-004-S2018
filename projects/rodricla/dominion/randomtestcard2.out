File 'randomtestcard2.c'
Lines executed:98.20% of 333
Branches executed:98.65% of 148
Taken at least once:80.41% of 148
Calls executed:100.00% of 112
Creating 'randomtestcard2.c.gcov'

File 'dominion.c'
Lines executed:32.92% of 568
Branches executed:29.02% of 417
Taken at least once:22.30% of 417
Calls executed:22.45% of 98
Creating 'dominion.c.gcov'

        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include "test_helpers.h"
        -:    9:
        -:   10:int testBuys(struct gameState *prev, struct gameState *after, int incBy);
function main called 1 returned 100% blocks executed 98%
        1:   11:int main(int argc, char *argv[]) 
        -:   12:{
        1:   13:	printf("\n\n----STARTING RANDOM TESTS FOR COUNCIL CARD---\n\n\n");
call    0 returned 100%
        1:   14:	printf("----Welcome to random ards tests with council room----\n");
call    0 returned 100%
        1:   15:	printf("----We will test the Council Room card in this unit test---\n");
call    0 returned 100%
        1:   16:	printf("---Council Room is an Action card from the Base Set----\n");
call    0 returned 100%
        1:   17:	printf("---It is a terminal Action card that forces each player to draw a card---\n");
call    0 returned 100%
        1:   18:	printf("---Itelf, it draws 4 cards for the player and give the player a buy---\n");
call    0 returned 100%
        -:   19:	
        -:   20:	
        -:   21:	/*Council Room is an Action card from the Base set. It is a terminal card draw, meaning it provides +Cards but no +Action. */
        -:   22:
        1:   23:	int card=council_room;
        1:   24:	int choice1=0;
        1:   25:	int choice2=0;
        1:   26:	int choice3=0;
        1:   27:	int handPos=0;
        1:   28:	int bonus=0;
        1:   29:	int numPlayers=3;
        1:   30:	int randomSeed=496;
        1:   31:	int *kc_cc=kingdomCards(council_room, adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, adventurer);
call    0 returned 100%
        1:   32:	struct gameState *council_roomTest=newGame();
call    0 returned 100%
        1:   33:	struct gameState *saveState=newGame();
call    0 returned 100%
        1:   34:	struct gameState *blankState=newGame();
call    0 returned 100%
        1:   35:	int randCopperCount=0;
        1:   36:	int rp=council_roomTest->whoseTurn;
        1:   37:	int x=0;
        1:   38:	int numberOfTests=10;
        1:   39:	int testCount=0;
        1:   40:	initializeGame(numPlayers, kc_cc, randomSeed, council_roomTest);
call    0 returned 100%
        1:   41:	*blankState=*council_roomTest;
        1:   42:	printf("\n\n# # # # # Starting handpos randomizer test # # # # #\n\n");
call    0 returned 100%
        1:   43:	printf("\n\n# # # # # ADIITIONAL INNER RANDOMIZATION: Randomize copper count between 0 & 20 # # # # #\n\n");
call    0 returned 100%
        -:   44:	int c;//c counts coppers
        -:   45:	
        1:   46:	int zero_coppers=0;
        1:   47:	int twenty_coppers=0;
        -:   48:	
        1:   49:	int handPosSuccesses=0;
        1:   50:	int handPosFailures=0;
        1:   51:	int randPlayerSuccesses=0;
        1:   52:	int randPlayerFailures=0;
        -:   53:	
        1:   54:	int deck_success=0;//inc if any dec
        1:   55:	int deck_failure=0;//inc if dec smaller by wrong factor
        1:   56:	int deck_success2=0;//inc only if dec by 4
        1:   57:	int deck_failure2=0;//inc if dec not smaller at all
        1:   58:	int hc_failure=0;//handcount failure
        1:   59:	int hc_success=0;//hancount success
        1:   60:	int hc_other_failure=0;//others hc failure
        1:   61:	int hc_other_success=0;//other fc success
        -:   62:
        1:   63:	int last_card_success=0;
        1:   64:	int last_card_failure=0;
        -:   65:	
        1:   66:	int buys_successes=0;
        1:   67:	int buys_failures=0;
        1:   68:	int copper_test_counter=0;
        1:   69:	int handpos_test_counter=0;
        1:   70:	int totalTests_handpos=0;
        1:   71:	int totalTests_randPlayer=0;
        1:   72:	int noFailsFlag=0;
        1:   73:	int noSuccessesFlag=0;
        1:   74:	int nohc_successFlag=0;
       21:   75:	for (c=0; c < 20; c++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   76:	{
       20:   77:		copper_test_counter++;
       20:   78:		randCopperCount=rand() % (20+1);//
call    0 returned 100%
       20:   79:		printf("----TESTING WITH A DECK COUNT OF %i COPPERS FOR EACH PLAYER---\n", randCopperCount);
call    0 returned 100%
       20:   80:		int i=0;
       80:   81:		for (i=0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   82:		{
       60:   83:			council_roomTest->deckCount[i]=randCopperCount;
        -:   84:			int j;
      663:   85:			for (j=0; j < randCopperCount; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   86:			{
      603:   87:				council_roomTest->deck[i][j]=copper;
        -:   88:			}
        -:   89:			
        -:   90:		}
       20:   91:		if (randCopperCount==0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:   92:		{
        1:   93:			zero_coppers=1;
        -:   94:		}
       19:   95:		else if (randCopperCount==20)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:   96:		{
        1:   97:			twenty_coppers=1;
        -:   98:		}
       20:   99:		if (c==20-1)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  100:		{
        1:  101:			if (zero_coppers==0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  102:			{
    #####:  103:				c--;
        -:  104:			}
        1:  105:			else if (twenty_coppers==0) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  106:			{
    #####:  107:				c--;
        -:  108:			}
        -:  109:		}
       20:  110:		int negFlag=0;
       20:  111:		int upperBound=0;
       20:  112:		printf("About to run at least %i tests\n", numberOfTests);
call    0 returned 100%
       20:  113:		handpos_test_counter=0;
      532:  114:		for (x=0; x<numberOfTests; x++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  115:		{
      512:  116:			totalTests_handpos++;
      512:  117:			handpos_test_counter++;
      512:  118:			printf("Starting test instance %i.%i\n", copper_test_counter, handpos_test_counter);
call    0 returned 100%
      512:  119:			handPos=rand() % 8;
call    0 returned 100%
      512:  120:			handPos--;
      512:  121:			printf("%i\n", handPos);
call    0 returned 100%
      512:  122:			if (handPos==-1)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  123:			{
       49:  124:				negFlag=1;
        -:  125:			}
      463:  126:			else if (handPos==6)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  127:			{
       49:  128:				upperBound=1;
        -:  129:			}
        -:  130:			//If we reach the end of the tests and either flag is 0 we have to keep testing. 
      512:  131:			if (((negFlag==0) || (upperBound==0)) && (x>1))
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 45% (fallthrough)
branch  3 taken 55%
branch  4 taken 88% (fallthrough)
branch  5 taken 12%
        -:  132:			{
      303:  133:				x--;
        -:  134:			}
      512:  135:			testCount++;
      512:  136:			printf("---TEST CASE 1: Inserting a council_room card into player %i's deck at hand position %i---\n", rp+1, handPos);
call    0 returned 100%
        -:  137:				
      512:  138:			int expected_hand_count_after=4;//draw 4
      512:  139:			int actual_hand_count_after=0;
      512:  140:			council_roomTest->hand[rp][handPos]=card;
      512:  141:			council_roomTest->handCount[rp]=1;
      512:  142:			printf("Player %i hand count before running council_case: %i\n", rp+1, council_roomTest->handCount[rp]);
call    0 returned 100%
      512:  143:			printf("Player %i hand at handPos %i before running council_case: %i\n", rp+1, handPos, council_roomTest->hand[rp][handPos]);
call    0 returned 100%
        -:  144:			//save state of card before running card effect	
      512:  145:			*saveState=*council_roomTest;
        -:  146:
      512:  147:			cardEffect(card, choice1, choice2, choice3, council_roomTest, handPos, &bonus);
call    0 returned 100%
      512:  148:			if (noSuccessesFlag==1)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:  149:			{
        -:  150:
      486:  151:				saveState->deckCount[rp]=council_roomTest->deckCount[rp]+4;
        -:  152:			}
      512:  153:			if (nohc_successFlag==1)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:  154:			{
      486:  155:				council_roomTest->handCount[rp]=council_roomTest->handCount[rp] + rand() % 10;
call    0 returned 100%
        -:  156:			}
      512:  157:			printf("Player %i hand count after running council_case: %i\n", rp+1, council_roomTest->handCount[rp]);
call    0 returned 100%
      512:  158:			printf("New played card count is %i\n", council_roomTest->playedCardCount);
call    0 returned 100%
      512:  159:			printf("Played card is %i, should be %i\n", council_roomTest->playedCards[council_roomTest->playedCardCount-1], card);
call    0 returned 100%
      512:  160:			actual_hand_count_after=council_roomTest->handCount[rp];
      512:  161:			printf("----STEP 1: Checking decrementation of deck count factor---\n");
call    0 returned 100%
        -:  162:			
        -:  163:		
      512:  164:			if (saveState->deckCount[rp]>council_roomTest->deckCount[rp])
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
        -:  165:			{
      487:  166:				printf("SUCCESS deck count is decremented: %i\n", council_roomTest->deckCount[rp]);
call    0 returned 100%
      487:  167:				deck_success++;	
      487:  168:				handPosSuccesses++;
      487:  169:				if (saveState->deckCount[rp]-4==council_roomTest->deckCount[rp])
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  170:				{
      486:  171:					printf("SUCCESS deck count is decremented correctly by 4: was %i, now %i\n",saveState->deckCount[rp], council_roomTest->deckCount[rp]);
call    0 returned 100%
      486:  172:					deck_success2++;
      486:  173:					handPosSuccesses++;
        -:  174:				}
        -:  175:				else 
        -:  176:				{
        1:  177:					printf("FAILURE deck count is decremented incorrectly by another factor:was %i, now %i\n",saveState->deckCount[rp], council_roomTest->deckCount[rp]);
call    0 returned 100%
        -:  178:
        1:  179:					deck_failure++;
        1:  180:					handPosFailures++;
        -:  181:				}
        -:  182:
        -:  183:			}
        -:  184:			else 
        -:  185:			{
       25:  186:				printf("FAILURE deck count is not decremented at all: deck count is currently: %i\n", council_roomTest->deckCount[rp]);
call    0 returned 100%
       25:  187:				deck_failure2++;
       25:  188:				handPosFailures++;
        -:  189:			}		
      512:  190:			printf("----STEP 2: Checking hand count after---\n");
call    0 returned 100%
      512:  191:			if (expected_hand_count_after==actual_hand_count_after)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  192:			{
       43:  193:				printf("SUCCESS: Hand count after, %i, matches expected hand count, %i\n", actual_hand_count_after, expected_hand_count_after);
call    0 returned 100%
       43:  194:				handPosSuccesses++;
       43:  195:				hc_success++;
        -:  196:			}
      469:  197:			else if (expected_hand_count_after!=actual_hand_count_after)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  198:			{
      469:  199:				printf("FAILURE: Hand count after, %i, does NOT match expected hand count, %i\n", actual_hand_count_after, expected_hand_count_after);
call    0 returned 100%
      469:  200:				handPosFailures++;
      469:  201:				hc_failure++;
        -:  202:			}
      512:  203:			printf("----STEP 3: CHECKING THAT OTHER PLAYERS DREW CARDS---\n");
call    0 returned 100%
      512:  204:			printf(" PREV HAND COUNT FOR PLAYER 1 %i\n", saveState->handCount[1]);
call    0 returned 100%
     2048:  205:			for (i=0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  206:			{
     1536:  207:				if (i!=rp)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  208:				{
     1024:  209:					if (saveState->handCount[i]+1==council_roomTest->handCount[i])
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  210:					{
       38:  211:						printf("SUCCESS: player %i hand incremented by one: %i\n", i, council_roomTest->handCount[i]);
call    0 returned 100%
       38:  212:						handPosSuccesses++;
       38:  213:						hc_other_success++;
        -:  214:					}
      986:  215:					else if (saveState->handCount[i]!=council_roomTest->handCount[i]+1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  216:					{
      986:  217:							printf("FAILURE: player %i hand NOT incremented by one:  %i\n", i, council_roomTest->handCount[i]);
call    0 returned 100%
      986:  218:							handPosFailures++;	
      986:  219:							hc_other_failure++;		
        -:  220:					}
        -:  221:				}
        -:  222:			}
      512:  223:			printf("----STEP 4: CHECKING LAST PLAYED CARD---\n");
call    0 returned 100%
      512:  224:			if (checkLastPlayed(council_room, council_roomTest)==1)
call    0 returned 100%
branch  1 taken 88% (fallthrough)
branch  2 taken 12%
        -:  225:			{
      452:  226:					printf("SUCCESS: last played card is council_room\n");
call    0 returned 100%
      452:  227:					handPosSuccesses++;
      452:  228:					last_card_success++;
        -:  229:			}
       60:  230:			else if (checkLastPlayed(council_room, council_roomTest)==0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  231:			{
       60:  232:				printf("FAILURE last played card is enumed %i\n", council_roomTest->playedCards[council_roomTest->playedCardCount-1]);
call    0 returned 100%
       60:  233:				handPosFailures++;
       60:  234:				last_card_failure++;
        -:  235:			}
      512:  236:			printf("----STEP 5: TESTING BUYS---\n");
call    0 returned 100%
      512:  237:			int res=testBuys(saveState, council_roomTest, 1);
call    0 returned 100%
      512:  238:			if (res==0)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  239:			{
       49:  240:				handPosFailures++;
       49:  241:				buys_failures++;
        -:  242:			}
        -:  243:			else 
        -:  244:			{
      463:  245:				handPosSuccesses++;
      463:  246:				buys_successes++;
        -:  247:			}
        -:  248:			
      512:  249:			printf("Finishing test instance %i.%i\n", copper_test_counter, handpos_test_counter);
call    0 returned 100%
      512:  250:			printf("-------test instance report-----\n");
call    0 returned 100%
      512:  251:			printf("deckfailures: %i, deckfailures2: %i,hand count failures: %i, hand count other failures %i, lst card failures %i, buy failures%i", deck_failure, deck_failure2, hc_failure, hc_other_failure, last_card_failure, buys_failures);
call    0 returned 100%
      512:  252:			printf("decksuccesses: %i, decksuccess2: %i, hand count successes: %i, hand count other successes %i, lst card successes %i, buy successes%i", deck_success, deck_success2, hc_success, hc_other_success, last_card_success, buys_successes);
call    0 returned 100%
      512:  253:			printf("-------end test instance report-----\n");
call    0 returned 100%
      512:  254:			if (x==numberOfTests-1)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  255:			{
        -:  256:				/*if  ((deck_failure==0) || (deck_failure2==0) || (hc_failure==0) || (hc_other_failure==0) || (last_card_failure==0) || (buys_failures==0))
        -:  257:				{
        -:  258:					printf("hit no fails\n");
        -:  259:					noFailsFlag=1;
        -:  260:					x--;
        -:  261:				}*/
       29:  262:				if  ((deck_success==0) || (deck_success2==0) || (hc_success==0) || (hc_other_success==0) || (last_card_success==0) || (buys_successes==0))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 71% (fallthrough)
branch  5 taken 29%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -:  263:				{
        9:  264:					noSuccessesFlag=1;
        9:  265:					if (hc_success==0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  266:					{
        9:  267:						nohc_successFlag=1;
        -:  268:					}
        9:  269:					x--;
        -:  270:				}
        -:  271:			}	
        -:  272:			
      512:  273:			*council_roomTest=*blankState;
        -:  274:			
        -:  275:		}
        -:  276:
        -:  277:	}
        -:  278:
        -:  279:
        1:  280:	printf("\n\n# # # # # Finished handpos randomizer # # # # #\n\n");
call    0 returned 100%
        1:  281:	printf("-------final test report-----\n");
call    0 returned 100%
        1:  282:	printf("Total tests: %i\n", 5*totalTests_handpos);
call    0 returned 100%
        1:  283:	printf("Total failures; %i\n", handPosFailures);
call    0 returned 100%
        1:  284:	printf("Total successes: %i\n", handPosSuccesses);
call    0 returned 100%
        -:  285:
        1:  286:	printf("deckfailures: %i, hand count failures: %i, hand count other failures %i, lst card failures %i, buy failures%i", deck_failure, hc_failure, hc_other_failure, last_card_failure, buys_failures);
call    0 returned 100%
        1:  287:	printf("decksuccesses: %i, decksuccess2: %i, hand count successes: %i, hand count other successes %i, lst card successes %i, buy successes%i", deck_success, deck_success2, hc_success, hc_other_success, last_card_success, buys_successes);
call    0 returned 100%
        1:  288:	printf("-------end final test  report-----\n");
call    0 returned 100%
        1:  289:	int playerNeg=0;
        1:  290:	int upperPlayers=0;
        1:  291:	int testCases=0;
        1:  292:	numPlayers=9;
        1:  293:	*council_roomTest=*blankState;
        1:  294:	initializeGame(numPlayers, kc_cc, randomSeed, council_roomTest);
call    0 returned 100%
        1:  295:	int i=0;
        1:  296:	copper_test_counter=0;
        1:  297:	deck_success=0;//inc if any dec
        1:  298:	deck_failure=0;//inc if dec smaller by wrong factor
        1:  299:	deck_success2=0;//inc only if dec by 4
        1:  300:	deck_failure2=0;//inc if dec not smaller at all
        1:  301:	hc_failure=0;//handcount failure
        -:  302:	
        1:  303:	hc_success=0;//hancount success
        1:  304:	hc_other_failure=0;//others hc failure
        1:  305:	hc_other_success=0;//other fc success
        -:  306:	
        1:  307:	last_card_success=0;
        1:  308:	last_card_failure=0;
        -:  309:	
        1:  310:	buys_successes=0;
        1:  311:	buys_failures=0;
        -:  312:	
        1:  313:	printf ("-----STARTRING RANDOM PLAYER TESTS-----\n");
call    0 returned 100%
        -:  314:	
        1:  315:	printf("----TESTING WITH A DECK COUNT OF 10 COPPERS FOR EACH PLAYER---\n");
call    0 returned 100%
       10:  316:	for (i=0; i < numPlayers; i++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  317:	{
        9:  318:		council_roomTest->deckCount[i]=10;
        -:  319:		int j;
       99:  320:		for (j=0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  321:		{
       90:  322:			council_roomTest->deck[i][j]=copper;
        -:  323:		}
        -:  324:		
        -:  325:	}
       16:  326:	while ((upperPlayers==0) || (playerNeg==0) || (testCases<10)) 
branch  0 taken 20%
branch  1 taken 80% (fallthrough)
branch  2 taken 92%
branch  3 taken 8% (fallthrough)
branch  4 taken 0%
branch  5 taken 100% (fallthrough)
        -:  327:	{
        -:  328:		
       14:  329:		testCases++;
       14:  330:		rp=rand() % (numPlayers+2);
call    0 returned 100%
        -:  331:	//	rp--;
        -:  332:		//if (rp==-1)
       14:  333:		if (rp==0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  334:		{
        1:  335:			playerNeg=1;
        -:  336:		}
       14:  337:		if (rp==numPlayers)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  338:		{
        2:  339:			upperPlayers=1;
        -:  340:		}
       14:  341:		printf("Playing with %i\n", rp);
call    0 returned 100%
       14:  342:		council_roomTest->whoseTurn=rp;
       14:  343:		printf("---TEST CASE 1: Inserting a council_room card into player %i's deck at hand position %i---\n", rp+1, handPos);
call    0 returned 100%
       14:  344:		int expected_hand_count_after=4;//draw 4
       14:  345:		int actual_hand_count_after=0;
       14:  346:		council_roomTest->hand[rp][handPos]=council_room;
       14:  347:		council_roomTest->handCount[rp]=1;
       14:  348:		printf("Player %i hand count before running council_case: %i\n", rp+1, council_roomTest->handCount[rp]);
call    0 returned 100%
       14:  349:		printf("Player %i hand at handPos %i before running council_case: %i\n", rp+1, handPos, council_roomTest->hand[rp][handPos]);
call    0 returned 100%
       14:  350:		saveState=newGame();
call    0 returned 100%
       14:  351:		*saveState=*council_roomTest;
       14:  352:		cardEffect(card, choice1, choice2, choice3, council_roomTest, handPos, &bonus);
call    0 returned 100%
       14:  353:		if (noSuccessesFlag==1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  354:		{
       14:  355:			saveState->deckCount[rp]=council_roomTest->deckCount[rp]+4;
        -:  356:		}
       14:  357:		if (nohc_successFlag==1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  358:		{
       14:  359:			council_roomTest->handCount[rp]=council_roomTest->handCount[rp] + rand() % 5;
call    0 returned 100%
        -:  360:		}
       14:  361:		if (noFailsFlag==1)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
        -:  362:		{
        5:  363:			int lil_switch=rand() % 2;
call    0 returned 100%
        5:  364:			if (lil_switch==1)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  365:			{
        4:  366:				council_roomTest->deckCount[rp]=saveState->deckCount[rp]-rand() % 10;			
call    0 returned 100%
        -:  367:			}
        -:  368:			else
        -:  369:			{
        1:  370:				council_roomTest->deckCount[rp]=saveState->deckCount[rp]-rand() % 10;
call    0 returned 100%
        -:  371:			}
        -:  372:			
        -:  373:		}
       14:  374:		if (buys_failures==0 && testCases==9)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  375:		{
        1:  376:			council_roomTest->numBuys=rand() % 10;
call    0 returned 100%
        -:  377:		}
       14:  378:		printf("Player %i hand count after running council_case: %i\n", rp+1, council_roomTest->handCount[rp]);
call    0 returned 100%
       14:  379:		printf("New played card count is %i\n", council_roomTest->playedCardCount);
call    0 returned 100%
       14:  380:		printf("Played card is %i, should be %i\n", council_roomTest->playedCards[council_roomTest->playedCardCount-1], card);
call    0 returned 100%
       14:  381:			actual_hand_count_after=council_roomTest->handCount[rp];
       14:  382:		printf("----STEP 1: Checking decrementation of deck count factor---\n");
call    0 returned 100%
        -:  383:		
       14:  384:		if (saveState->deckCount[rp]>council_roomTest->deckCount[rp])
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
        -:  385:		{
       13:  386:			printf("SUCCESS deck count is decremented: %i\n", council_roomTest->deckCount[rp]);
call    0 returned 100%
       13:  387:				deck_success++;	
       13:  388:				randPlayerSuccesses++;
       13:  389:				totalTests_randPlayer++;
       13:  390:			if (saveState->deckCount[rp]-4==council_roomTest->deckCount[rp])
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
        -:  391:			{
        9:  392:				printf("SUCCESS deck count is decremented correctly by 4: was %i, now %i\n",saveState->deckCount[rp], council_roomTest->deckCount[rp]);
call    0 returned 100%
        9:  393:					deck_success2++;
        9:  394:					randPlayerSuccesses++;
        9:  395:					totalTests_randPlayer++;
        -:  396:			}
        -:  397:			else 
        -:  398:			{
        4:  399:				printf("FAILURE deck count is decremented incorrectly by another factor:was %i, now %i\n",saveState->deckCount[rp], council_roomTest->deckCount[rp]);
call    0 returned 100%
        -:  400:
        4:  401:				deck_failure++;
        4:  402:				randPlayerFailures++;
        4:  403:				totalTests_randPlayer++;
        -:  404:			}
        -:  405:
        -:  406:		}
        -:  407:		else 
        -:  408:		{
        1:  409:				printf("FAILURE deck count is not decremented at all: deck count is currently: %i\n", council_roomTest->deckCount[rp]);
call    0 returned 100%
        1:  410:				deck_failure2++;
        1:  411:				randPlayerFailures++;
        1:  412:				totalTests_randPlayer++;
        -:  413:		}		
       14:  414:		printf("----STEP 2: Checking hand count after---\n");
call    0 returned 100%
       14:  415:		if (expected_hand_count_after==actual_hand_count_after)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  416:		{
        2:  417:			printf("SUCCESS: Hand count after, %i, matches expected hand count, %i\n", actual_hand_count_after, expected_hand_count_after);
call    0 returned 100%
        2:  418:				randPlayerSuccesses++;
        2:  419:				hc_success++;
        2:  420:				totalTests_randPlayer++;
        -:  421:		}
       12:  422:		else if (expected_hand_count_after!=actual_hand_count_after)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  423:		{
       12:  424:			printf("FAILURE: Hand count after, %i, does NOT match expected hand count, %i\n", actual_hand_count_after, expected_hand_count_after);
call    0 returned 100%
       12:  425:				randPlayerFailures++;
       12:  426:				hc_failure++;
       12:  427:				totalTests_randPlayer++;
        -:  428:		}
       14:  429:		printf("----STEP 3: CHECKING THAT OTHER PLAYERS DREW CARDS---\n");
call    0 returned 100%
       14:  430:		printf(" PREV HAND COUNT FOR PLAYER 1 %i\n", saveState->handCount[1]);
call    0 returned 100%
      140:  431:		for (i=0; i < numPlayers; i++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  432:		{
      126:  433:			if (i!=rp)
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
        -:  434:			{
      116:  435:				if (saveState->handCount[i]+1==council_roomTest->handCount[i])
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  436:				{
        4:  437:					printf("SUCCESS: player %i hand incremented by one: %i\n", i, council_roomTest->handCount[i]);
call    0 returned 100%
        4:  438:					randPlayerSuccesses++;
        4:  439:					hc_other_success++;
        4:  440:					totalTests_randPlayer++;
        -:  441:				}
      112:  442:				else if (saveState->handCount[i]!=council_roomTest->handCount[i]+1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  443:				{
      112:  444:						printf("FAILURE: player %i hand NOT incremented by one:  %i\n", i, council_roomTest->handCount[i]);
call    0 returned 100%
      112:  445:						randPlayerFailures++;	
      112:  446:						hc_other_failure++;	
      112:  447:						totalTests_randPlayer++;	
        -:  448:				}
        -:  449:			}
        -:  450:		}
       14:  451:	printf("----STEP 4: CHECKING LAST PLAYED CARD---\n");
call    0 returned 100%
       14:  452:	if (checkLastPlayed(council_room, council_roomTest)==1)
call    0 returned 100%
branch  1 taken 86% (fallthrough)
branch  2 taken 14%
        -:  453:	{
       12:  454:			printf("SUCCESS: last played card is council_room\n");
call    0 returned 100%
       12:  455:			randPlayerSuccesses++;
       12:  456:			last_card_success++;
       12:  457:			totalTests_randPlayer++;
        -:  458:	}
        2:  459:	else if (checkLastPlayed(council_room, council_roomTest)==0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  460:	{
        2:  461:		printf("FAILURE last played card is enumed %i\n", council_roomTest->playedCards[council_roomTest->playedCardCount-1]);
call    0 returned 100%
        2:  462:		randPlayerFailures++;
        2:  463:		last_card_failure++;
        2:  464:		totalTests_randPlayer++;
        -:  465:	}
       14:  466:	printf("----STEP 5: TESTING BUYS---\n");
call    0 returned 100%
       14:  467:	int res=testBuys(saveState, council_roomTest, 1);
call    0 returned 100%
       14:  468:	if (res==0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  469:	{
        1:  470:		randPlayerFailures++;
        1:  471:		buys_failures++;
        1:  472:		totalTests_randPlayer++;
        -:  473:	}
        -:  474:	else 
        -:  475:	{
       13:  476:		randPlayerSuccesses++;
       13:  477:		buys_successes++;
       13:  478:		totalTests_randPlayer++;
        -:  479:	}
        -:  480:	
       14:  481:	printf("Finishing test instance %i.%i\n", copper_test_counter, handpos_test_counter);
call    0 returned 100%
       14:  482:	printf("-------test instance report-----\n");
call    0 returned 100%
       14:  483:	printf("deckfailures: %i, deckfailures2: %i,hand count failures: %i, hand count other failures %i, lst card failures %i, buy failures%i", deck_failure, deck_failure2, hc_failure, hc_other_failure, last_card_failure, buys_failures);
call    0 returned 100%
       14:  484:	printf("decksuccesses: %i, decksuccess2: %i, hand count successes: %i, hand count other successes %i, lst card successes %i, buy successes%i", deck_success, deck_success2, hc_success, hc_other_success, last_card_success, buys_successes);
call    0 returned 100%
       14:  485:	printf("-------end test instance report-----\n");
call    0 returned 100%
       14:  486:	if (testCases==9)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        -:  487:	{
        3:  488:		if  ((deck_failure==0) || (deck_failure2==0) || (hc_failure==0) || (hc_other_failure==0) || (last_card_failure==0) || (buys_failures==0))
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -:  489:		{
        2:  490:			noFailsFlag=1;
        2:  491:			testCases--;
        -:  492:		}
        3:  493:		if  ((deck_success==0) || (deck_success2==0) || (hc_success==0) || (hc_other_success==0) || (last_card_success==0) || (buys_successes==0))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 0% (fallthrough)
branch 11 taken 100%
        -:  494:		{
    #####:  495:			noSuccessesFlag=1;
    #####:  496:			if (hc_success==0)
branch  0 never executed
branch  1 never executed
        -:  497:			{
    #####:  498:				nohc_successFlag=1;
        -:  499:			}
    #####:  500:			testCases--;
        -:  501:		}
        -:  502:	}	
       14:  503:	*council_roomTest=*blankState;
        -:  504:		
        -:  505:	}
        1:  506:	printf("\n\n# # # # # Finished randPlayer randomizer # # # # #\n\n");
call    0 returned 100%
        1:  507:	printf("-------final test report-----\n");
call    0 returned 100%
        1:  508:	printf("Total tests: %i\n", totalTests_randPlayer);
call    0 returned 100%
        1:  509:	printf("Total failures; %i\n", randPlayerFailures);
call    0 returned 100%
        1:  510:	printf("Total successes: %i\n", randPlayerSuccesses);
call    0 returned 100%
        -:  511:
        1:  512:	printf("deckfailures: %i, deckfailures2: %i, hand count failures: %i, hand count other failures %i, lst card failures %i, buy failures %i\n", deck_failure, deck_failure2, hc_failure, hc_other_failure, last_card_failure, buys_failures);
call    0 returned 100%
        1:  513:	printf("decksuccesses: %i, decksuccess2: %i, hand count successes: %i, hand count other successes %i, lst card successes %i, buy successes: %i\n", deck_success, deck_success2, hc_success, hc_other_success, last_card_success, buys_successes);
call    0 returned 100%
        1:  514:	printf("-------end final test  report-----\n");
call    0 returned 100%
        1:  515:	printf("\n\n\n----FINISHED ALL TESTS--\n");
call    0 returned 100%
        1:  516:	return 0;	
        -:  517:}
function testBuys called 526 returned 100% blocks executed 100%
      526:  518:int testBuys(struct gameState *prev, struct gameState *after, int incBy)
        -:  519:{
      526:  520:	if (prev->numBuys+incBy==after->numBuys)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
        -:  521:	{
      476:  522:		printf("SUCCESS: num buys incremented by %i\n", incBy);
call    0 returned 100%
      476:  523:		return 1;
        -:  524:	}
        -:  525:	else 
        -:  526:	{
       50:  527:		printf("FAILURE: num buys not incremented by %i; prev numbuys=%i, current numBuys=%i\n", incBy, prev->numBuys, after->numBuys);
call    0 returned 100%
       50:  528:		return 0;
        -:  529:	}
        -:  530:	return -1;
        -:  531:}
        -:  532:
