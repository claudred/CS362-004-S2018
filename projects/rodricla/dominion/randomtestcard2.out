File 'randomtestcard2.c'
Lines executed:85.29% of 68
Branches executed:76.92% of 26
Taken at least once:53.85% of 26
Calls executed:77.14% of 35
Creating 'randomtestcard2.c.gcov'

File 'dominion.c'
Lines executed:30.99% of 568
Branches executed:28.54% of 417
Taken at least once:19.90% of 417
Calls executed:22.45% of 98
Creating 'dominion.c.gcov'

        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:#include "test_helpers.h"
        -:    9:
        -:   10:void testBuys(struct gameState *prev, struct gameState *after, int incBy);
function main called 1 returned 100% blocks executed 81%
        1:   11:int main(int argc, char *argv[]) 
        -:   12:{
        1:   13:	printf("----STARTING TESTS----\n\n\n");
call    0 returned 100%
        1:   14:	printf("----Welcome to cardtest3.c----\n");
call    0 returned 100%
        1:   15:	printf("----We will test the Council card in this unit test---\n");
call    0 returned 100%
        1:   16:	printf("---Council is an Action card from the Base Set----\n");
call    0 returned 100%
        1:   17:	printf("---It is a terminal Action card that forces each player to draw a card---\n");
call    0 returned 100%
        1:   18:	printf("---Itelf, it draws 4 cards for the player and give the player a buy---\n");
call    0 returned 100%
        -:   19:	
        -:   20:	
        -:   21:	/*Council Room is an Action card from the Base set. It is a terminal card draw, meaning it provides +Cards but no +Action. */
        -:   22:	//printf("Checks current hand count: TRUE\n");
        -:   23:	//printf("Checks other players card drawn: TRUE\n");
        -:   24:	//printf("Checks played card pile: TRUE\n");
        -:   25:	
        1:   26:	int card=council_room;
        1:   27:	int choice1=0;
        1:   28:	int choice2=0;
        1:   29:	int choice3=0;
        1:   30:	int handPos=0;
        1:   31:	int bonus=0;
        1:   32:	int numPlayers=3;
        1:   33:	int randomSeed=666;
        1:   34:	int *kc_cc=kingdomCards(council_room, adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, adventurer);
call    0 returned 100%
        1:   35:	struct gameState *council_roomTest=newGame();
call    0 returned 100%
        1:   36:	struct gameState *saveState=newGame();
call    0 returned 100%
        -:   37:	//rp=relevant player
        1:   38:	int rp=council_roomTest->whoseTurn;
        -:   39:	
        1:   40:	initializeGame(numPlayers, kc_cc, randomSeed, council_roomTest);
call    0 returned 100%
        1:   41:	printf("---TEST CASE 1: Inserting a council_room card into player %i's deck at hand position %i---\n", rp+1, handPos);
call    0 returned 100%
        -:   42:	
        1:   43:	printf("----TESTING WITH A DECK COUNT OF 10 COPPERS FOR EACH PLAYER---\n");
call    0 returned 100%
        1:   44:	int i=0;
        4:   45:	for (i=0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   46:	{
        3:   47:		council_roomTest->deckCount[i]=10;
        -:   48:		int j;
       33:   49:		for (j=0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   50:		{
       30:   51:			council_roomTest->deck[i][j]=copper;
        -:   52:		}
        -:   53:		
        -:   54:	}
        1:   55:	int expected_hand_count_after=4;//draw 4
        1:   56:	int actual_hand_count_after=0;
        1:   57:	council_roomTest->hand[rp][handPos]=card;
        1:   58:	council_roomTest->handCount[rp]=1;
        1:   59:	printf("Player %i hand count before running council_case: %i\n", rp+1, council_roomTest->handCount[rp]);
call    0 returned 100%
        1:   60:	printf("Player %i hand at handPos %i before running council_case: %i\n", rp+1, handPos, council_roomTest->hand[rp][handPos]);
call    0 returned 100%
        -:   61:	
        1:   62:	*saveState=*council_roomTest;
        -:   63:	//council_roomTest->handCount[rp]=1;
        -:   64:	//council_roomTest->hand[rp][council_room]=1;
        -:   65:
        -:   66:	//printf("player hand count before is: %i, hand is %i\n", council_roomTest->handCount[rp], council_roomTest->hand[rp][council_room]);
        -:   67:	
        1:   68:	cardEffect(card, choice1, choice2, choice3, council_roomTest, handPos, &bonus);
call    0 returned 100%
        1:   69:	printf("Player %i hand count after running council_case: %i\n", rp+1, council_roomTest->handCount[rp]);
call    0 returned 100%
        1:   70:	printf("New played card count is %i\n", council_roomTest->playedCardCount);
call    0 returned 100%
        -:   71:	
        1:   72:	printf("Played card is %i, should be %i\n", council_roomTest->playedCards[council_roomTest->playedCardCount-1], card);
call    0 returned 100%
        1:   73:	actual_hand_count_after=council_roomTest->handCount[rp];
        -:   74:	
        -:   75:
        1:   76:	if (saveState->deckCount[rp]<council_roomTest->deckCount[rp])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   77:	{
    #####:   78:		printf("SUCCESS deck count is decremented: %i\n", council_roomTest->deckCount[rp]);
call    0 never executed
    #####:   79:		if (saveState->deckCount[rp]-4==council_roomTest->deckCount[rp])
branch  0 never executed
branch  1 never executed
        -:   80:		{
    #####:   81:			printf("SUCCESS deck count is decremented correctly by 4: %i\n", council_roomTest->deckCount[rp]);
call    0 never executed
        -:   82:		}
        -:   83:		else 
        -:   84:		{
    #####:   85:			printf("FAILURE deck count is decremented incorrectly by another factor: %i\n", council_roomTest->deckCount[rp]);
call    0 never executed
        -:   86:		}
        -:   87:	}
        -:   88:	
        -:   89:	
        -:   90:	//TEST HAND COUNT AFTER:
        1:   91:	if (expected_hand_count_after==actual_hand_count_after)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   92:	{
    #####:   93:		printf("SUCCESS: Hand count after, %i, matches expected hand count, %i\n", actual_hand_count_after, expected_hand_count_after);
call    0 never executed
        -:   94:	}
        1:   95:	else if (expected_hand_count_after!=actual_hand_count_after)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   96:	{
        1:   97:		printf("FAILURE: Hand count after, %i, does NOT match expected hand count, %i\n", actual_hand_count_after, expected_hand_count_after);
call    0 returned 100%
        -:   98:	}
        -:   99:
        -:  100:	//printf("")
        -:  101:
        -:  102:	//printf("INTERNAL RULES FOR COUNCIL CASE\n");
        -:  103:	//printf("BUSINESS RULES FOR COUNCIL CASE\n");
        -:  104:	//cost: 5 coins
        -:  105:	
        -:  106:	//type: action 
        -:  107:	//set: base
        -:  108:	//Rule1: other players 
        -:  109:	//Rule2: other players draw a card
        -:  110:	//Rule3: discard the card
        -:  111:	//attributes; terminal card draw
        -:  112:	
        1:  113:	printf("----STEP 3: CHECKING THAT OTHER PLAYERS DREW CARDS---\n");
call    0 returned 100%
        -:  114:
        1:  115:	printf(" PREV HAND COUNT FOR PLAYER 1 %i\n", saveState->handCount[1]);
call    0 returned 100%
        4:  116:	for (i=0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  117:	{
        3:  118:		if (i!=rp)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  119:		{
        2:  120:			if (saveState->handCount[i]+1==council_roomTest->handCount[i])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  121:			{
        2:  122:				printf("SUCCESS: player %i hand incremented by one: %i\n", i, council_roomTest->handCount[i]);
call    0 returned 100%
        -:  123:			}
    #####:  124:			else if (saveState->handCount[i]!=council_roomTest->handCount[i]+1)
branch  0 never executed
branch  1 never executed
        -:  125:			{
    #####:  126:				printf("FAILURE: player %i hand NOT incremented by one:  %i\n", i, council_roomTest->handCount[i]);			
call    0 never executed
        -:  127:			}
        -:  128:		}
        -:  129:	}
        1:  130:	if (checkLastPlayed(council_room, council_roomTest)==1)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  131:	{
        1:  132:		printf("SUCCESS: last played card is council_room\n");
call    0 returned 100%
        -:  133:	}
    #####:  134:	else if (checkLastPlayed(council_room, council_roomTest)==0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  135:	{
    #####:  136:		printf("FAILURE last played card is enumed %i\n", council_roomTest->playedCards[council_roomTest->playedCardCount-1]);
call    0 never executed
        -:  137:	}
        1:  138:	testBuys(saveState, council_roomTest, 1);
call    0 returned 100%
        -:  139:
        1:  140:	printf("\n\n\n----FINISHED ALL TESTS--\n");
call    0 returned 100%
        1:  141:	return 0;	
        -:  142:}
function testBuys called 1 returned 100% blocks executed 75%
        1:  143:void testBuys(struct gameState *prev, struct gameState *after, int incBy)
        -:  144:{
        1:  145:	if (prev->numBuys+incBy==after->numBuys)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  146:	{
        1:  147:		printf("SUCCESS: num buys incremented by %i\n", incBy);
call    0 returned 100%
        -:  148:	}
        -:  149:	else 
        -:  150:	{
    #####:  151:		printf("FAILURE: num buys not incremented by %i; prev numbuys=%i, current numBuys=%i\n", incBy, prev->numBuys, after->numBuys);
call    0 never executed
        -:  152:	}
        -:  153:	
        1:  154:}
